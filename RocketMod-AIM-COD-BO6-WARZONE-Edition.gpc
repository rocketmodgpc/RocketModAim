/*

version: RocketMod Aim - COD - BO6 / WARZONE Edition 3.6.7
Author : Jorel1337
Copyright: 2025, RocketMod
All rights reserved ‚Äì Do not copy or distribute without credit.

Discord : https://discord.gg/7ZGANnFEUS (Join it to get settings and improve the script together)
Now available our AI ChatBot to provide you the best settings depending your sensitivity and FOV !

Social : @CronusZenRocketMod
All our links on https://linktr.ee/CronusZenRocketMod

‚ö†Ô∏èV3.7 is now alive, join our discord to know more about it.

üé• Important Youtube videos
üîπDemo of the script features : https://youtu.be/aIJnLKURJL4?feature=shared
üîπDemo of how to setup : https://youtu.be/hYTTDjE4pxg?feature=shared
üîπDemo of how to setup Anti-Recoil by Skittelz25 : https://youtube.com/shorts/mDq9d4ZT1iU?feature=shared
üîπDemo of how to setup Aim Assist by Skittelz25 : https://youtu.be/IrB2TD1gACU?feature=shared
üîπDemo of how to setup In-game warzone settings by Skittelz25 : https://youtu.be/sMSkjGswQ7U?feature=shared
üîπDemo of how to bypass for PS5 users FIRMWARE < 2.2.12 : https://youtube.com/shorts/37SvELQMMuc?feature=shared
üîπDemo of how to bypass for PS5 users FIRMWARE > 2.2.12 : https://youtube.com/shorts/mEpfDR992s4?feature=shared
üîπDemo of the script in Action by Fitz : https://youtu.be/dZ2UgIiNzYw?feature=shared
üîπDemo of the script in Action by Skittelz25 : https://youtu.be/SsnLaew50_4?feature=shared
üîπDemo of the script in Action by Skittelz25 on BO6 Multiplayer : https://youtu.be/y9tpPSyaNjU?feature=shared
üîπDemo of the script in Action by Skittelz25 on Warzone : https://www.youtube.com/watch?v=vAgd63uUZ1U

‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà  _____ _____ _____ _____ _____ _____    _____ _____ ____                         *
‚ñà | __  |     |     |  |  |   __|_   _|  |     |     |    \                        *
‚ñà |    -|  |  |   --|    -|   __| | |    | | | |  |  |  |  |                       *
‚ñà |__|__|_____|_____|__|__|_____| |_|    |_|_|_|_____|____/                        *
‚ñà                                                                                 *
‚ñà                                                                                 *
‚ñà  _____ __ __       __ _____ _____ _____ __                                       *
‚ñà | __  |  |  |   __|  |     | __  |   __|  |                                      *
‚ñà | __ -|_   _|  |  |  |  |  |    -|   __|  |__                                    *
‚ñà |_____| |_|    |_____|_____|__|__|_____|_____|                                   *
‚ñà															                       *
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Features:
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà  - ANTI RECOIL: Automatically compensates weapon recoil depending setup values.
‚ñà  - AA ROCKET: Aim assist polar with tracker movement pattern.( Check section : üöÄ AA ROCKET : aim assist setting explanation )
‚ñà  - AUTO RUN: Enables automatic running with configurable options.
‚ñà  - HOLD BREATH: Automatically holds breath when aiming down sights.
‚ñà  üîß SETTINGS:
‚ñà  	  - Breath Timer (s): Duration for holding breath (in seconds).
‚ñà  	  - Time before (s): Delay before activation (in seconds).
‚ñà     - Cooldown (ms): Cooldown period between activations (in milliseconds).
‚ñà  - NO RUMBLE: Disables controller vibrations.
‚ñà  - ANTI AFK: Prevents inactivity disconnections.
‚ñà  - AUTO PING: Auto ping enemy.
‚ñà  üîß SETTINGS:
‚ñà	- Trigger Timer (s): Delay before activation (in seconds).
‚ñà  - SLIDE CANCEL: stop slidding after x seconds.
‚ñà  üîß SETTINGS:
‚ñà	- Cancel Delay (s): Delay before stop to slide (in seconds).
‚ñà  - Inverted Axis : Invert Axis
‚ñà  - Quick toogle for RapidFire & Anti Recoil
‚ñà   üîß Allow you to deactivate Anti Recoil & AA if Rumbling rate under or Equal to the value. (It will depends from your controller, you need to find it manually )
‚ñà  - JUMPSHOT
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Setup Menu Navigation üöÄ :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà üéõ Navigation Controls :
‚ñà üéØ Entering the Setup Menu ‚ûù Hold 'LT / L2' & Press 'MENU / OPTION'
‚ñà üìÇ Accessing a Submenu ‚ûù Press A (CROSS)
‚ñà ‚Ü© Exiting a Submenu ‚ûù Press B (CIRCLE)
‚ñà üö™ üíæ Saving & Exiting ‚ûù Press Y (TRIANGLE)
‚ñà üö™ Exiting Without Saving in memory ( changes will be reseted next time you run the script ) ‚ûù Press B (CIRCLE)
‚ñà
‚ñà üîß Modifying Settings :
‚ñà ‚ñ∂ Switch Options ‚ûù Use LEFT/RIGHT
‚ñà üîº Change Values ‚ûù UP/DOWN (Main Menu) | LEFT/RIGHT (Submenus)
‚ñà
‚ñà üîß  For anti recoil :
‚ñà Use LB / RB (L1 / R1) to change profile to setup.
‚ñà
‚ñà üí° Pro Tip: When you like your settings, Always press Y to save your changes before shutting down the Cronus Zen or opening a new script !
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Main Screen Controls üöÄ :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà üéÆ Main Screen Functions:
‚ñà üï∂Ô∏è Turn Off Screen Saver ‚ûù Press 'VIEW / SHARED' button
‚ñà üéØ Entering the Setup Menu ‚ûù Hold 'LT / L2' & Press 'MENU / OPTION'
‚ñà üîÑ Change Profile ‚ûù Each time you Press 'Y' button
‚ñà
‚ñà ‚ö° Quick toggle : Forcing Profiles:
‚ñà 1Ô∏è‚É£ Force Profile 1 ‚ûù Hold 'VIEW / SHARED'  button + Press 'Y / TRIANGLE'
‚ñà 2Ô∏è‚É£ Force Profile 2 ‚ûù Hold 'VIEW / SHARED'  button + Press 'B / CIRCLE'
‚ñà
‚ñà ‚ö° Quick toggle :
‚ñà 1Ô∏è‚É£ Anti Recoil ‚ûù Hold ADS button + Press DPAD Left
‚ñà 2Ô∏è‚É£ Rapid Fire ‚ûù Hold ADS button + Press DPAD Right
‚ñà
‚ñà üõë Enabling & Disabling RocketMod
‚ñà ‚ùå Deactivate RocketMod Script ‚ûù Hold 'LT / L2' & Press 'VIEW / SHARED' button
‚ñà ‚úÖ Reactivate RocketMod Script ‚ûù Hold 'LT / L2' & Press 'VIEW / SHARED' button
‚ñà
‚ñà üí° Pro Tip: If your script isn‚Äôt responding, try deactivating and reactivating it with 'ADS' + 'VIEW' or change to an other script and go back to RocketMod slot to reset!
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà üöÄ AA ROCKET : aim assist setting explanation :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà üîß SETTINGS EXPLAINED:
‚ñà üîπLeft Size ‚Äì Adjusts the size (range) of the left aim assist movement.
‚ñà A larger size means the aim assist moves further left when activated.
‚ñà
‚ñà üîπLeft Speed ‚Äì Controls how fast the left aim assist movement occurs.
‚ñà Higher values make the assist movement quicker.
‚ñà
‚ñà üîπRight Size ‚Äì Adjusts the size (range) of the right aim assist movement.
‚ñà A larger size means the aim assist moves further right when activated.
‚ñà
‚ñà üîπRight Speed ‚Äì Controls how fast the right aim assist movement occurs.
‚ñà Higher values make the assist movement quicker.
‚ñà
‚ñà üîπActive on ADS (Aim Down Sights) ‚Äì Determines whether the aim assist is active while aiming down sights (ADS).
‚ñà Enabled: Aim assist only works while aiming.
‚ñà Disabled: Aim assist functions at all times.
‚ñà
‚ñà üîπActivation Max ‚Äì Sets the upper limit for activation.
‚ñà If movement or input surpasses this value, aim assist will stop functioning.
‚ñà
‚ñà üîπActivation Min ‚Äì Sets the lower limit for activation.
‚ñà If movement or input is below this value, aim assist will not activate.
‚ñà
‚ñà üîπBoost Strength ‚Äì Determines how aggressively the aim assist "boosts" towards a target.
‚ñà Higher values: More aggressive lock-on effect.
‚ñà Lower values: More subtle adjustments.
‚ñà
‚ñà üîπDynamic ‚Äì Toggles whether aim assist adapts based on movement patterns and speed.
‚ñà Enabled: The aim assist adjusts dynamically depending on movement.
‚ñà Disabled: Aim assist remains static and follows predefined values.
‚ñà
‚ñà üîπShape ‚Äì Allows you to choose the movement pattern of the aim assist, such as:
‚ñà Circle: A circular tracking pattern.
‚ñà Square: A square-shaped movement pattern.
‚ñà Other shapes may be available for different movement effects.
‚ñà
‚ñà üîπSmoothing Factor ‚Äì Controls how smoothly the aim assist transitions between movements, reducing abrupt changes in aim.
‚ñà Higher values: Smoother transitions, but slightly slower response.
‚ñà Lower values: Faster transitions, but can feel jittery.
‚ñà
‚ñà üîπLock Helper ‚Äì Determines how strong the aim assist "locks" onto a target, helping to keep the crosshair aligned.
‚ñà Higher values: Stronger target tracking.
‚ñà Lower values: More natural movement without as much assistance.
‚ñà
‚ñà üî• How These Settings Work Together
‚ñà If you increase size & speed, aim assist covers a larger area but may feel less precise.
‚ñà Boost Strength + Lock Helper can create a strong sticky aim effect.
‚ñà Smoothing Factor is crucial for avoiding unnatural or jittery movement.
‚ñà Activation Min/Max fine-tune when aim assist kicks in.
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Version üöÄ :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà 	v2.5 :
‚ñà	üîπ Virtual Machine Base Time Optimization ‚Äì The script now adjusts the base time dynamically depending on the controller, making execution more efficient for PS5 and Xbox controllers.
‚ñà	üîπ New Auto Ping Feature ‚Äì We've added an auto ping with a built-in timer, preventing spam while keeping communication seamless.
‚ñà	üîπSetup menu UI, UX bug fixes.
‚ñà	v2.6 :
‚ñà	üîπ Code has been cleaned and optimized.
‚ñà	üîπ UX improved, and UI saving bug fixed.
‚ñà	v2.7 :
‚ñà	üîπ UX improved, and UI bug fixed.
‚ñà	üîπ Better Vibration Handling for anti recoil
‚ñà	üîπ New Slide cancel feature.
‚ñà	v2.8 :
‚ñà	üîπ Aim lock helper added to AA RocketMod
‚ñà	v2.9 :
‚ñà	üîπ No Recoil improvement for PS4 & PS5
‚ñà	v3.0 :
‚ñà	üîπ Implementation of Buttons layout to solve script problems.
‚ñà	üîπ Added No Recoil activation option ( Ads & Fire, Fire Only , Ads+Fire or Fire )
‚ñà	v3.1 :
‚ñà	üîπ Added Rapid Fire feature
‚ñà	v3.2 :
‚ñà	üîπ Fixing Rumble problem on xbox elite & Scuff
‚ñà	üîπ Horizontal No recoil setup added.
‚ñà	v3.3 :
‚ñà	üîπ Quick toogle for RapidFire & Anti Recoil
‚ñà	üîπ Refactor all script stucture.
‚ñà	v3.4 :
‚ñà	üîπ Quick toogle improvement
‚ñà	üîπ UX/UI improvement
‚ñà	v3.5 :
‚ñà	üîπ AntiRecoil activation improvement
‚ñà	üîπ Silent mod system improvement ( Rumble )
‚ñà	üîπ Aim Assist silent mod activation
‚ñà	v3.6 :
‚ñà	üîπ Vehicule mod. (Disable anti-recoil & aim assist to avoid screen checking in vehicule)
‚ñà		üîπ switch on : FIRE + Double tap DPAD-RIGHT ( Led will be purple )
‚ñà		üîπ switch off : tap Reload button.
‚ñà	üîπ Aim Assist improvement when Circle Shape is setup.
‚ñà   üîπ RapidFire minimum Hold time value improvement
‚ñà	üîπ JumpShot for primary & secondary profile ( Setup in misc settings )
‚ñà	v3.6.1 :
‚ñà	üîπFix Shape saving for Aim Assist
‚ñà	üîπ1 Save button only. Press B (CIRCLE)
‚ñà	v3.6.2 :
‚ñà	üîπBugFix for Slide cancel when you use a Button Layout
‚ñà	üîπBugFix of EnemyPing when you use a Button Layout
‚ñà	v3.6.3 :
‚ñà   üîπScrolling Setup menu message now differ from controllers
‚ñà	v3.6.4 :
‚ñà   üîπCore script optimization
‚ñà   üîπAim assist - Silent mod v2 -> Setting manually silent rate is not needed anymore.
‚ñà	v3.6.5 :
‚ñà   üîπBugfix wrong Setup Menu message for Xbox
‚ñà	v3.6.6 :
‚ñà   üîπEarly access v3.7 Bunny Hop Mod. (you have just to push the jump button to non stop jump)
‚ñà	v3.6.7 :
‚ñà   üîπBugfix Left stick Aim Assist.
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà Donation üöÄ :
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà If you enjoyed the script and found it useful, I‚Äôd really appreciate your support!
‚ñà
‚ñà Send with Paypal https://www.paypal.com/donate/?hosted_button_id=4H8ZEL2VFJBQS
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà    Additional Credits:
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà    ‚ñà Taylordrift21      >  Base for Shapped Aim Assist & functions
‚ñà
‚ñà    ‚ñà DoNotAtMe ("Me.")  >  Base for "Slowdown" Aim Assist
‚ñà
‚ñà    ‚ñà Swizzy             >  Bit-packed SPVAR saving & others functions
‚ñà
‚ñà    ‚ñà Jblaze122		  >  Design helper functions
‚ñà
‚ñà    ‚ñà Fadexz		      >  Functions & Tips
‚ñà
‚ñà	 ‚ñà Noozbar, DoGzTheFiGhTer for all them tutorials and others i forget ;)
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà
‚ñà	‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ïó‚ïî‚ïî‚ï¶‚ïó  ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶‚ïî‚ïê‚ïó‚ï¶ ‚ï¶  ‚ïî‚ïê‚ïó‚ïî‚ïó‚ïî‚ï¶ ‚ï¶‚ïî‚ï¶‚ïó‚ï¶ ‚ï¶‚ï¶‚ïî‚ïó‚ïî‚ïî‚ïê‚ïó  ‚ïî‚ïó ‚ïî‚ïê‚ïó‚ï¶  ‚ï¶  ‚ïî‚ïê‚ïó‚ï¶ ‚ï¶
‚ñà	 ‚ïë‚ïë‚ïë ‚ïë‚ïë‚ïë‚ïë ‚ïë    ‚ïë ‚ïë ‚ïë‚ïë ‚ïë‚ïë  ‚ï†‚ïê‚ï£  ‚ï†‚ïê‚ï£‚ïë‚ïë‚ïë‚ïö‚ï¶‚ïù ‚ïë ‚ï†‚ïê‚ï£‚ïë‚ïë‚ïë‚ïë‚ïë ‚ï¶  ‚ï†‚ï©‚ïó‚ïë‚ï£ ‚ïë  ‚ïë  ‚ïë ‚ïë‚ïë‚ïë‚ïë
‚ñà	‚ïê‚ï©‚ïù‚ïö‚ïê‚ïù‚ïù‚ïö‚ïù ‚ï©    ‚ï© ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï© ‚ï©  ‚ï© ‚ï©‚ïù‚ïö‚ïù ‚ï©  ‚ï© ‚ï© ‚ï©‚ï©‚ïù‚ïö‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ï©‚ïê‚ïù‚ï©‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ï©‚ïù
‚ñà		IF YOU FEEL YOU HAVE NOT THE SKILL AND A VERY GOOD CHANCE
‚ñà		   OF MESSING UP THE SCRIPT DONT CHANGE ANYTHING BELOW
‚ñà
‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
*/

const uint8 Layouts[][] = {
 	  //Fire   ADS	  Lethal Tactical  Jump	 Crouch	  Melee	  Sprint  Reload WSwap,  Ping
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT = 0
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL = 1
	{ XB1_LT, XB1_RT, XB1_LB, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // LEFTY = 2
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE = 3
	{ XB1_RT, XB1_RB, XB1_LT, XB1_LB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE TACTICAL = 4
	{ XB1_LT, XB1_LB, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_LS, XB1_RS ,XB1_X, XB1_Y, XB1_UP }, // N0M4D/CHARLIE LEFTY = 5
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER = 6
	{ XB1_RT, XB1_LT, XB1_RB, XB1_A,  XB1_LB, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL = 7
	{ XB1_LB, XB1_LT, XB1_RT, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // ONE-HAND GUNSLINGER = 8
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE = 9
	{ XB1_RT, XB1_LT, XB1_RB, XB1_LB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BRAWLER = 10
	{ XB1_RT, XB1_LT, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY = 11
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING = 12
	{ XB1_RT, XB1_LT, XB1_RB, XB1_RB, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LB }, // BUMPER PING TACTICAL = 13
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // DEFAULT SWAPPED = 14
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // TACTICAL SWAPPED = 15
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER SWAPPED = 16
	{ XB1_RB, XB1_LB, XB1_RT, XB1_A,  XB1_LT, XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BUMPER JUMPER TACTICAL SWAPPED = 17
	{ XB1_RB, XB1_LB, XB1_RT, XB1_LT, XB1_RS, XB1_B,  XB1_A,  XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // STICK AND MOVE SWAPPED = 18
	{ XB1_RB, XB1_LB, XB1_RS, XB1_A,  XB1_LB, XB1_B,  XB1_RB, XB1_LS ,XB1_X, XB1_Y, XB1_UP }, // BEASTY SWAPPED 19
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_B,  XB1_RS, XB1_LS ,XB1_X, XB1_Y, XB1_LT }, // BUMPER PING = 18
	{ XB1_RB, XB1_LB, XB1_RT, XB1_RT, XB1_A,  XB1_RS, XB1_B,  XB1_LS ,XB1_X, XB1_Y, XB1_LT } // BUMPER PING TACTICAL = 19
};


int	FIRE_BTN ,
	ADS_BTN,
	LETHAL_BTN ,
	TACTICAL_BTN ,
	JUMP_BTN ,
	CROUCH_BTN ,
	MELEE_BTN ,
	SPRINT_BTN,
	RELOAD_BTN,
	SWITCHWEAPON_BTN,
	PING_BTN;

/****************
* Define
******************/

define devMod = FALSE;

// Time before screen saver
define loadingTimer = 3000;
define SCREEN_SAVER_TIMER = 10000;
define STATE_TRANSITION_TIMER = 100;

/****
* Variables
********************/
int loadingTime = 0;
int screenSaverTimer = 0;
int stateTransitionTime = 0;

// Anti Recoil values
int comboAntiRecoilVertical;
int comboAntiRecoilHorizontal;
int profileId = 0;

// AIM ASSIST
int angle;

// Multi toggles
int toggleAntiRecoil[3];
int toggleAimAssistRocket = FALSE;
int toggleAntiAfk = FALSE;
int toggleAutoRun = FALSE;

int currentSubCfg = 0;
int currentMod = 0;

// Amount of multi toggle - Used for display profiles
define AMOUNT_OF_MOD_TOGGLE = 9;

enum { AntiRecoilEnum=0 , AimAssistRocketEnum,
AutoRunEnum, HoldBreathModEnum,
AntiAfkEnum, EnemyPingEnum, SlideCancelEnum,RapidFireEnum,
MiscEnum }

const uint8 modId[]  = {
AntiRecoilEnum, AimAssistRocketEnum,
AutoRunEnum, HoldBreathModEnum,
AntiAfkEnum, EnemyPingEnum, SlideCancelEnum, RapidFireEnum, MiscEnum};

 const uint8 MODNAME[][] = {
    { 32, 32, 65, 78, 84, 73, 32, 82, 69, 67, 79, 73, 76, 32, 32, 0 }, //* "ANTI RECOIL"
    { 32, 32, 32, 65, 65, 32, 82, 79, 67, 75, 69, 84, 32, 32, 32, 0 }, //* "AA ROCKET"
    { 32, 32, 32, 65, 85, 84, 79, 32, 82, 85, 78, 32, 32, 32, 32, 0 }, //* "AUTO RUN"
    { 32, 32, 72, 79, 76, 68, 32, 66, 82, 69, 65, 84, 72, 32, 32, 0 }, //* "HOLD BREATH"
    { 32, 32, 32, 65, 78, 84, 73, 32, 65, 70, 75, 32, 32, 32, 32, 0 }, //* "ANTI AFK"
    { 32, 32, 69, 78, 69, 77, 89, 32, 80, 73, 78, 71, 32, 32, 32, 0 }, //* "ENEMY PING"
    { 32, 83, 76, 73, 68, 69, 32, 67, 65, 78, 67, 69, 76, 32, 32, 0 }, //* "Slide Cancel "
    { 32, 32, 32, 82, 65, 80, 73, 68, 32, 70, 73, 82, 69, 32, 32, 0 }, //* "Rapid Fire"
    { 32, 32, 32, 32, 32, 77, 73, 83, 67, 32, 32, 32, 32, 32, 32, 0 }  //* " Misc "
};

 const uint8 CLEANING[][] = {
	 { 32, 32, 32, 32, 76, 79, 65, 68, 73, 78, 71,  32, 32, 32, 32, 0 } //* LOADING
 };

// Menu Setup
int modNameId = 0;

// antirecoil start value for 3 profiles: profileId = 0, 1 and 2
int antiRecoilVertical[3];
int antiRecoilHorizontal[3];

/***** Var for Design *****/

// Text to display
const string DSAVED = "SAVED";
const string SPROFILE_1 = "Profile 1"; //* or primary weapon
const string SPROFILE_2 = "Profile 2"; //* or secondary weapon
const string SPROFILE_3 = "Profile 3"; //* or meelee weapon
const string SNOPROFILE = "No Profile";
const string ONOFF[] = {"OFF","ON"};

const string SETTINGSAAP[] = {
"Left Size", "Left Speed", "Right Size",
"Right Speed", "Active on ADS", "Activation Max",
"Activation Min", "Boost Strength",
"Dynamic", "Shape",
"Smoothing Factor",
"Aim Lock Strength",
"HeadShot Strength",
"HeadShot Timer(ms)",
"Breath Timer (s)",
"Time before (s)",
"Cooldown (ms)",
"Timer (s)",
"Cancel Delay (ms)",
"Rapid Fire Speed",
"RF Hold Time",
"Inverted",
"No Rumble",
"Buttons Layout",
"JumpShot P1",
"JumpShot P2",
"Bunny Hop",
"Vertical",
"Horizontal",
"Activation"
};
const string RANDOMETEXT[] = {"OPEN SUB MENU"};
const string arActivation[]  = {"Ads+Fire", "Ads / Fire", "Ads+Fire / Fire", "Ads / Ads+Fire", "Ads/Fire/Ads+Fire"};
const string BtnLayouts[] = {"Default", "Tactical", "Lefty", "N0M4D/Charlie", "N0M4D/Charlie Tac", "N0M4D/Charlie Left", "Bumper Jumper", "Bumper Jumper Tac", "1-Hand Gunslinger", "Stick & Move",
"Brawler", "Beast","Bumper Ping","Bumper Ping Tac", "Default Flipped","Tactical Flipped", "B.Jumper Flipped", "B.JumprTac Flipped", "Stick&Move Flipped","Beasty Swapped","B.Ping Flipped","B.Ping.Tac.Flipped"}


enum { LeftSizeEnum=0 , LeftSpeedEnum, RightSizeEnum,
RightSpeedEnum,  OutSideFocusEnum, activationRangeMaxEnum,
activationRangeMinEnum, boostStrengthEnum, DynamicFactorEnum, AAShapeEnum,
SmoothingFactorEnum, AimLockStrengthEnum, HeadShotStrengthEnum, HeadShotTimerEnum, BreathTimerEnum, TimeBeforeBreathActivationEnum,
CooldownTimerEnum, EnemyPingTimerTriggerEnum, SlideCancelDelayEnum, rapidFireShotsPerSecondEnum,
rapidFireHoldTimeEnum, InvertEnum, NoRumbleEnum, buttonLayoutEnum, jumpShotProfile1Enum, jumpShotProfile2Enum,
BunnyHopEnum,
antiRecoilVerticalEnum, antiRecoilHorizontalEnum, antiRecoilActivationEnum  }

// Settings !! Adapt depending Enum quantity
int settings[40];
const int settingMinMax[][] = {
	{  0, 50 }, // LeftSizeEnum
	{  0, 50 }, // LeftSpeedEnum
	{  0, 50 }, // RightSizeEnum
	{  0, 50 }, // RightSpeedEnum
	{  0, 1 }, // OutSideFocusEnum
	{  0, 100 }, // activationRangeMaxEnum
	{  0, 100 }, // activationRangeMinEnum
	{  0, 100 }, // boostStrengthEnum
	{  0, 1 }, // DynamicFactorEnum
	{  0, 5 }, // AAShapeEnum
	{  0, 30 }, // SmoothingFactorEnum
	{ 0, 100 },// AimLockStrengthEnum
	{ 0, 100 }, //HeadShotStrengthEnum
	{ 0, 2000 }, //HeadShotTimerEnum
	{  0, 4 }, // BreathTimerEnum
	{  0, 20 }, // TimeBeforeBreathActivationEnum
	{  0, 20 }, // 15 CooldownTimerEnum
	{  0, 10 }, // EnemyPingTimerTriggerEnum
	{ 10, 120 }, // SlideCancelDelayEnum
	{  1, 20 }, //rapidFireShotsPerSecondEnum
	{  20, 500 }, //rapidFireHoldTimeEnum
	{ -1, 1 }, // InvertEnum
	{  0, 1 }, // NoRumbleEnum
	{  0, 21 }, //ButtonsLayoutEnum
	{  0, 1 }, // jumpShotProfile1Enum
	{  0, 1 }, // jumpShotProfile2Enum
	{  0, 1 }, // BunnyHopEnum
	{  -50, 50 }, //antiRecoilVerticalEnum
	{  -50, 50 }, //antiRecoilHorizontalEnum
	{  0, 4 } //antiRecoilActivationEnum
};


int aimAssistShape[3];
const string SHAPES[] = {"Circular", "Tall Oval", "Wide Oval", "Spiral", "Helix" };
enum  {CircularEnum=0, TallOvalEnum, WideOvalEnum, SpiralEnum, HelixEnum }

// Sets the LED color based on hue, saturation and brightness
// Color constants:
const int16 Color[][] = {
    { 20, 50, 50 },
    { 0, 0, 0 },
    { 0, 100, 100 },
    { 240, 100, 93 },
    { 120, 100, 50 },
    { 300, 100, 75 },
    { 20, 50, 30 }
};
enum { Hue=0 , Saturation, Brightness }
enum { White=0 , Black, Red, Blue, Green, Purple, Pink }

// Always bump toggle array depending Enum list
int toggle[6];
enum { BlockRumble=0 , HoldBreathEnum, ToggleEnemyPingEnum, ToggleSlideCancelEnum, ToggleRapidFireEnum }
enum { Profile1Enum=0 , Profile2Enum, Profile3Enum }
int tempProfileId = Profile1Enum;

// Breath
int InitialActivation;
int StartTimer = 0;
int BreathTimer = 0;
int CooldownTimer = 0;
int BreathTime = 0;
int StartBreathTime = 0;
int CooldownTime = 0;
int HoldBreathActive = FALSE;

int EnemyPingTimer = 0; // Global variable to track elapsed time
int enemyPingTime;

int vehiculeMod = FALSE;
int vehiculeModFirePress = 0;
int currentLedColor = Black;

enum {
    STATE_OFF, // 0
    STATE_RESTART,
    STATE_LOADING, // 2
    STATE_PLAYING,
    STATE_SETUP_MENU, // 4
    STATE_SETUP_SUBMENU,
    STATE_SCREEN_SAVER, // 6
    STATE_SAVING,
    STATE_CLEAN_SCREEN, // 8
    STATE_QUICK_TOGGLE // 9
}

// Global state variable
int currentState = STATE_LOADING;  // Start in the loading state
int previousState; // prvious state
int tempState; // Next state
int quickToggleModId;
int bunnyHopToggle = FALSE;

/****
* Init
********************/
init {
	cls_oled(0);
	currentLedColor = Pink;
	SetLEDColor(currentLedColor);
	loadSettingsSvar();
	setButtonsLayout(settings[buttonLayoutEnum]);
	setVmBaseTime( get_controller() ) ;
}

/****
* Main
********************/
main {
    switch (currentState) {
        case STATE_OFF: {
        	cls_oled(OLED_BLACK);
            handleOffState();
            break;
        }
        case STATE_RESTART: {
            handleRestartState();
            break;
        }
        case STATE_LOADING: {
            handleLoadingState();
            break;
        }
        case STATE_PLAYING: {
            handlePlayingState();
            break;
        }
        case STATE_SETUP_MENU: {
            handleUserSetupMenuSateInput();
            break;
        }
        case STATE_SETUP_SUBMENU: {
            handleSubMenuState();
            break;
        }
        case STATE_SCREEN_SAVER: {
            handleScreenSaverState();
            break;
        }
        case STATE_SAVING: {
            handleSavingState();
            break;
        }
        case STATE_CLEAN_SCREEN: {
            handleCleanScreenState();
            break;
        }
        case STATE_QUICK_TOGGLE: {
            handleQuickToggleState();
            break;
        }

    }
    set_val(TRACE_1, currentState);
}


/****
* State Management Fonction
********************/

function handleOffState() {
    combo_stop_all();
	if (!combo_running(DISPLAY_DESACTIVATED)) {
	    combo_run(DISPLAY_DESACTIVATED);
	}
	handleUserOffSateInput();
}

function handleRestartState() {
    resetToProfile1();
    previousState = currentState;
	tempState = STATE_PLAYING;
	currentState = STATE_CLEAN_SCREEN;
}

// Handles the LOADING state
function handleLoadingState() {
    if (loadingTime >= loadingTimer) { // if the timer is greater than or equal too
       combo_stop(ComboDisplayIntro);
       cls_oled(OLED_BLACK);
       resetToProfile1();
       currentState = STATE_PLAYING;
    } else {
        loadingTime += get_rtime();
        combo_run(ComboDisplayIntro);
    }
}

function handleCleanScreenState() {
	if (previousState == STATE_SAVING) {
		cls_oled(OLED_BLACK);
		print(centerX(sizeof(DSAVED) - 1,OLED_FONT_LARGE_WIDTH),centerY(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,DSAVED[0]);
	} else if (previousState == STATE_PLAYING && tempState == STATE_SCREEN_SAVER ) {
		cls_oled(OLED_BLACK);
	}  else if (previousState == STATE_SCREEN_SAVER && tempState == STATE_SCREEN_SAVER ) {
		cls_oled(OLED_BLACK);
	} else {
		cls_oled(OLED_WHITE);
	}

	if (stateTransitionTime > STATE_TRANSITION_TIMER) {
    		currentState = tempState;
    		previousState = currentState;
    		stateTransitionTime = 0;
	} else {
			stateTransitionTime += get_rtime();
	}
}

// Handles the PLAYING state (normal gameplay)
function handlePlayingState() {
	previousState = currentState;
    displayMainScreen();
    handleUserPlayingSateInput();
    setScreenSaver();
}

// Handles the Screen saver state
function handleScreenSaverState() {
	previousState = currentState;
	handleUserPlayingSateInput();
}

// Handles the MAIN MENU state
function handleUserSetupMenuSateInput() {
	previousState = currentState;
	tempProfileId = profileId;

    cls_oled(1);
    combo_stop_all();
    block_all_inputs();

    displayCurrentModScreen();
    mainMenuProfileHandling();

    if (event_press(XB1_DOWN)) {
        toggleModState();
    }

	// Open submenu
    if (event_press(XB1_A) && modId[currentMod] != AntiAfkEnum && modId[currentMod] != AutoRunEnum) {
        currentState = STATE_SETUP_SUBMENU;
    }

	// Return to gameplay
    if (event_press(XB1_B)) {
        saveSPVAR();
    }

	if (event_press(XB1_RIGHT)) {
		modNameId += 1;
		currentMod = modId[modNameId];
	}

	if (event_press(XB1_LEFT)) {
		modNameId -= 1;
		currentMod = modId[modNameId];
	}

	// Cycle mods name
	if(modNameId > AMOUNT_OF_MOD_TOGGLE - 1) {
		modNameId = 0;
		currentMod = modId[modNameId];
	}

	if(modNameId < 0) {
		modNameId = AMOUNT_OF_MOD_TOGGLE - 1;
		currentMod = modId[modNameId];
	}
}

// Handles the SUBMENU state
function handleSubMenuState() {
	previousState = currentState;
    displaySubModScreen(modId[currentMod], 0);
    if (event_press(XB1_B)) {
        currentState = STATE_SETUP_MENU;  // Return to main menu
    }
}

// Handles the Saveing state
function handleSavingState() {

    if (get_val(SWITCHWEAPON_BTN)) {
        profileId = tempProfileId;
	}
	combo_run(SAVE);

	tempState = STATE_PLAYING;
	currentState = STATE_CLEAN_SCREEN;
	screenSaverTimer = 0;

}

function handleExitAndSave() {
    if (get_val(CROUCH_BTN) || event_press(CROUCH_BTN)) {
        saveSPVAR();
    }
}

function handleQuickToggleState() {

	previousState = currentState;

	set_val(XB1_UP, 0);
	set_val(XB1_DOWN, 0);
	set_val(XB1_LEFT, 0);
	set_val(XB1_RIGHT, 0);
    if (quickToggleModId == RapidFireEnum) {
  		toggle[ToggleRapidFireEnum] = !toggle[ToggleRapidFireEnum];
  		print(centerX(getStringLength( addr(MODNAME[RapidFireEnum])) , OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr(MODNAME[RapidFireEnum]) );
		print(centerX(getStringLength(ONOFF[toggle[ToggleRapidFireEnum]]), OLED_FONT_LARGE_WIDTH) ,38,OLED_FONT_LARGE,OLED_BLACK,ONOFF[toggle[ToggleRapidFireEnum]]);
		tempState = STATE_PLAYING;
		currentState = STATE_CLEAN_SCREEN;
    } else if (quickToggleModId == AntiRecoilEnum) {
    	displaySubModScreen(modId[AntiRecoilEnum], 0);
    }
}

// Display the selected mod's screen
int xPos, currentModId, withModProfile;
function displayCurrentModScreen() {
	currentModId = modId[currentMod];
    xPos = centerX(getStringLength(addr(MODNAME[currentModId])), OLED_FONT_SMALL_WIDTH);
    withModProfile = iif(currentMod == AntiRecoilEnum, TRUE, FALSE);
    displayModScreen(xPos, OLED_FONT_SMALL, addr(MODNAME[currentModId]), getToggleValue(modId[currentMod]), withModProfile);
}

// Get toggle value based on the selected mod
function getToggleValue(mod) {
    switch (mod) {
        case AntiRecoilEnum: {
         return toggleAntiRecoil[profileId];
        }
        case AutoRunEnum: {
        	return toggleAutoRun;
        }
        case AimAssistRocketEnum: {
        	return toggleAimAssistRocket;
        }
        case AntiAfkEnum: {
        	return toggleAntiAfk;
        }
        case HoldBreathModEnum: {
        	return toggle[HoldBreathEnum];
        }
        case EnemyPingEnum:  {
        	return toggle[ToggleEnemyPingEnum];
        }
        case SlideCancelEnum: {
        	return toggle[ToggleSlideCancelEnum];
        }
        case RapidFireEnum: {
        	return toggle[ToggleRapidFireEnum];
        }
    }
    return 0;
}

// Toggle mod state
function toggleModState() {
    switch (modId[currentMod]) {
        case AntiRecoilEnum:  {
         toggleAntiRecoil[profileId] = !toggleAntiRecoil[profileId];
         break;
        }
        case AimAssistRocketEnum: {
         toggleAimAssistRocket = !toggleAimAssistRocket;
         break;
        }
        case AutoRunEnum: {
         toggleAutoRun = !toggleAutoRun;
         break;
        }
        case AntiAfkEnum: {
         toggleAntiAfk = !toggleAntiAfk;
         break;
        }
        case HoldBreathModEnum: {
         toggle[HoldBreathEnum] = !toggle[HoldBreathEnum];
         break;
        }
        case EnemyPingEnum: {
         toggle[ToggleEnemyPingEnum] = !toggle[ToggleEnemyPingEnum];
         break;
        }
        case SlideCancelEnum: {
         toggle[ToggleSlideCancelEnum] = !toggle[ToggleSlideCancelEnum];
         break;
        }
        case RapidFireEnum: {
         toggle[ToggleRapidFireEnum] = !toggle[ToggleRapidFireEnum];
         break;
        }
    }
}

function saveSPVAR() {
	set_pvar(SPVAR_1, toggleAntiRecoil[Profile1Enum]);
	set_pvar(SPVAR_2 ,antiRecoilVertical[Profile1Enum]);
	set_pvar(SPVAR_3 ,antiRecoilHorizontal[Profile1Enum]);
	set_pvar(SPVAR_4 , settings[BunnyHopEnum]);
	set_pvar(SPVAR_5 ,toggleAimAssistRocket);
	set_pvar(SPVAR_6 , settings[HeadShotStrengthEnum]);
	set_pvar(SPVAR_7 , settings[HeadShotTimerEnum]);

	set_pvar(SPVAR_10,toggleAntiRecoil[Profile2Enum]);
	set_pvar(SPVAR_11 ,antiRecoilVertical[Profile2Enum]);
	set_pvar(SPVAR_12 ,antiRecoilHorizontal[Profile2Enum]);


	set_pvar(SPVAR_20, toggleAntiRecoil[Profile3Enum]);
	set_pvar(SPVAR_21 ,antiRecoilVertical[Profile3Enum]);
	set_pvar(SPVAR_22 ,antiRecoilHorizontal[Profile3Enum]);


	set_pvar(SPVAR_29 ,settings[AimLockStrengthEnum]);
    set_pvar(SPVAR_30, toggleAutoRun  );
    set_pvar(SPVAR_37, settings[OutSideFocusEnum]);
   	set_pvar(SPVAR_38, settings[LeftSizeEnum]);
	set_pvar(SPVAR_39, settings[LeftSpeedEnum]);
	set_pvar(SPVAR_40, settings[RightSizeEnum]);
	set_pvar(SPVAR_41, settings[RightSpeedEnum]);
	set_pvar(SPVAR_42, settings[boostStrengthEnum]);
	set_pvar(SPVAR_43, settings[NoRumbleEnum]);
	set_pvar(SPVAR_44, settings[activationRangeMaxEnum]);
	set_pvar(SPVAR_45, settings[activationRangeMinEnum]);
	set_pvar(SPVAR_46, toggle[HoldBreathEnum]);
	set_pvar(SPVAR_47, settings[EnemyPingTimerTriggerEnum]);
	set_pvar(SPVAR_48, settings[InvertEnum]);
	set_pvar(SPVAR_49, toggle[ToggleEnemyPingEnum]);
	set_pvar(SPVAR_50, toggle[ToggleSlideCancelEnum]);
	set_pvar(SPVAR_51, aimAssistShape[Profile1Enum]);
	set_pvar(SPVAR_52, aimAssistShape[Profile2Enum]);
	set_pvar(SPVAR_54, settings[DynamicFactorEnum]);
	set_pvar(SPVAR_55, settings[SmoothingFactorEnum]);
	set_pvar(SPVAR_56, settings[SlideCancelDelayEnum]);
	set_pvar(SPVAR_57, settings[BreathTimerEnum]);
	set_pvar(SPVAR_58, settings[TimeBeforeBreathActivationEnum]);
	set_pvar(SPVAR_59, settings[CooldownTimerEnum]);
	set_pvar(SPVAR_60, settings[buttonLayoutEnum]);
	set_pvar(SPVAR_61, settings[antiRecoilActivationEnum]);
	set_pvar(SPVAR_62, settings[rapidFireShotsPerSecondEnum]);
	set_pvar(SPVAR_63, settings[rapidFireHoldTimeEnum]);
	set_pvar(SPVAR_64, toggle[ToggleRapidFireEnum]);

	previousState = currentState;
	currentState = STATE_SAVING;
}

function loadSettingsSvar() {
	toggleAntiRecoil[0] = get_pvar(SPVAR_1, 0, 1, 0 );
	antiRecoilVertical[0]   = get_pvar(SPVAR_2, -50, 50, 22);
	antiRecoilHorizontal[0] = get_pvar(SPVAR_3, -50, 50, 0);
	settings[BunnyHopEnum] = get_pvar(SPVAR_4, settingMinMax[BunnyHopEnum][1], settingMinMax[BunnyHopEnum][0], 0);
	toggleAimAssistRocket = get_pvar(SPVAR_5, 0, 1, 1 );
	settings[HeadShotStrengthEnum]  = get_pvar(SPVAR_6, 0, 100, 0);
    settings[HeadShotTimerEnum] = get_pvar(SPVAR_7, 1, 2000, 100);

	toggleAntiRecoil[1] = get_pvar(SPVAR_10, 0, 1, 0 );
	antiRecoilVertical[1]   = get_pvar(SPVAR_11, -50, 50, 20);
	antiRecoilHorizontal[1] = get_pvar(SPVAR_12, -50, 50, 0);

    toggleAutoRun   = get_pvar(SPVAR_31, 0, 1, 1);
	settings[LeftSizeEnum] = get_pvar(SPVAR_38, 0, 100, 0);
	settings[LeftSpeedEnum] = get_pvar(SPVAR_39, 0, 100, 0);
	settings[RightSizeEnum] = get_pvar(SPVAR_40, 0, 100, 20);
	settings[RightSpeedEnum] = get_pvar(SPVAR_41, 0, 100, 20);
	settings[boostStrengthEnum] = get_pvar(SPVAR_42, 1, 100, 20);
	settings[OutSideFocusEnum] = get_pvar(SPVAR_37, 0, 1, 0);
	settings[NoRumbleEnum] = get_pvar(SPVAR_43, 0, 1, 1);
	toggle[HoldBreathEnum] = get_pvar(SPVAR_46, 0, 1, 1);
	settings[activationRangeMinEnum] =  get_pvar(SPVAR_45, 0, 100, 15);
	settings[activationRangeMaxEnum] = get_pvar(SPVAR_44, 1, 100, 100);
    settings[DynamicFactorEnum] = get_pvar(SPVAR_54, 0, 1, 0);
    settings[SmoothingFactorEnum] = get_pvar(SPVAR_55, 0, 30, 20);
    settings[AimLockStrengthEnum] = get_pvar(SPVAR_29, 1, 100, 100);
	settings[SlideCancelDelayEnum] = get_pvar(SPVAR_56, 10, 120, 20);
    settings[BreathTimerEnum] = get_pvar(SPVAR_57, 1, 20, 3)
 	settings[TimeBeforeBreathActivationEnum] = get_pvar(SPVAR_58, 1, 20, 5);
    settings[CooldownTimerEnum] = get_pvar(SPVAR_59, 1, 20, 3);

    settings[EnemyPingTimerTriggerEnum] = get_pvar(SPVAR_47, 1, 10, 3);
    toggle[ToggleEnemyPingEnum] = get_pvar(SPVAR_49, 0, 1, 0);
	toggle[ToggleSlideCancelEnum] = get_pvar(SPVAR_50, 0, 1, 0);

	settings[InvertEnum] = get_pvar(SPVAR_48, -1, 1, 1 );
	if (settings[InvertEnum] != (-1 || 1 )) {
		settings[InvertEnum] = 1;
	}
	aimAssistShape[Profile1Enum] = get_pvar(SPVAR_51, CircularEnum, HelixEnum, HelixEnum);
	aimAssistShape[Profile2Enum] = get_pvar(SPVAR_52, CircularEnum, HelixEnum, HelixEnum);
    aimAssistShape[Profile3Enum] = HelixEnum;

    settings[buttonLayoutEnum] = get_pvar(SPVAR_60, 0, 21, 0);
    settings[antiRecoilActivationEnum] = get_pvar(SPVAR_61, 0, 4, 0);
    settings[rapidFireShotsPerSecondEnum] = get_pvar(SPVAR_62, 0, 20, 12);
    settings[rapidFireHoldTimeEnum] = get_pvar(SPVAR_63, 20, 500, 65);

    toggle[ToggleRapidFireEnum] = get_pvar(SPVAR_64, 0, 1, 0);
}

function setButtonsLayout(Type) {
	FIRE_BTN = Layouts[Type][0];
	ADS_BTN = Layouts[Type][1];
	LETHAL_BTN = Layouts[Type][2];
	TACTICAL_BTN = Layouts[Type][3];
	JUMP_BTN = Layouts[Type][4];
	CROUCH_BTN = Layouts[Type][5];
	MELEE_BTN = Layouts[Type][6];
	SPRINT_BTN = Layouts[Type][7];
	RELOAD_BTN = Layouts[Type][8];
	SWITCHWEAPON_BTN = Layouts[Type][9];
	PING_BTN = Layouts[Type][10];
}

int range, filled_width, cursor_position;
function drawProgressBarWithCursor(dpb_x,  dpb_y,  dpb_width,  dpb_height,  dpb_value,  dpb_min_value,  dpb_max_value) {
	range = dpb_max_value - dpb_min_value;
    filled_width = ((dpb_value - dpb_min_value) * dpb_width) / range;

    cursor_position = dpb_x + filled_width;

    rect_oled(dpb_x, dpb_y, dpb_width, dpb_height,0, 0);

    if (filled_width > 0) {
        rect_oled(dpb_x, dpb_y, filled_width, dpb_height, 1, 0);
    }
    line_oled(cursor_position, dpb_y - 2, cursor_position, dpb_y + dpb_height + 2, 4, 0);
}


function initScreenSaver() {
	 screenSaverTimer = 0;
	 currentState = STATE_PLAYING;
}

function setScreenSaver() {
    if (screenSaverTimer >= SCREEN_SAVER_TIMER) { // if the timer is greater than or equal too
    	tempState = STATE_SCREEN_SAVER;
    	currentState = STATE_CLEAN_SCREEN;
    } else {
    	screenSaverTimer += get_rtime();
    }
}


function displayMainScreen() {
	cls_oled(1);
	displayLine(0, 35, 127, 35, 2, 0);

	if(profileId == Profile1Enum) {
		print(centerX(sizeof(SPROFILE_1) - 1, OLED_FONT_MEDIUM_WIDTH),10,OLED_FONT_MEDIUM,OLED_BLACK,SPROFILE_1[0]);
	} else if(profileId == Profile2Enum) {
		print(centerX(sizeof(SPROFILE_2) - 1, OLED_FONT_MEDIUM_WIDTH),10,OLED_FONT_MEDIUM,OLED_BLACK,SPROFILE_2[0]);
	}

	displayPressToOpenMenu();
}

function displayModScreen(f_string, fSize, f_print, f_toggle, withProfile) {
	setVmBaseTime(PIO_AUTO);

	// Build Background
	displayMiddleLine(TRUE, TRUE, FALSE, FALSE, 0, 0, OLED_BLACK);

	// Display MOD_NAME
	print(f_string, 5, fSize, OLED_WHITE, f_print);

	// Display ON OFF
	if (f_print !=  addr( MODNAME[MiscEnum] )) {
	 	print(centerX(getStringLength(ONOFF[f_toggle]), OLED_FONT_LARGE_WIDTH) ,38,OLED_FONT_LARGE,OLED_BLACK,ONOFF[f_toggle]);
	} else {
		print(centerX(sizeof(RANDOMETEXT) - 1, OLED_FONT_SMALL_WIDTH ), 45, OLED_FONT_SMALL, OLED_BLACK, RANDOMETEXT[0] );
	}

	if (withProfile == 0) {
		displayMiddleLine(FALSE, FALSE, FALSE, FALSE, 0, 20, OLED_WHITE);
		print(centerX(sizeof(SNOPROFILE) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SNOPROFILE[0]);
	} else if (withProfile == 1) {
		displayMiddleLine(FALSE, FALSE, TRUE, TRUE, 0, 20, OLED_WHITE);
		if (profileId == Profile1Enum) {
			print(centerX(sizeof(SPROFILE_1) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SPROFILE_1[0]);
    	} else if(profileId == Profile2Enum) {
			print(centerX(sizeof(SPROFILE_2) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SPROFILE_2[0]);
    	} else if(profileId == Profile3Enum) {
			print(centerX(sizeof(SPROFILE_3) - 1, OLED_FONT_SMALL_WIDTH),20,OLED_FONT_SMALL,OLED_BLACK,SPROFILE_3[0]);
    	}
    }
    line_oled(0, 33, 127, 33 , 1, OLED_BLACK);
}

function displaySubModScreen(modMenu, shortcutAccess) {
	block_all_inputs();
	cls_oled(OLED_WHITE);
	if (AntiRecoilEnum == modMenu) {

		print(centerX(getStringLength(addr(MODNAME[AntiRecoilEnum])), OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr(MODNAME[AntiRecoilEnum]));
		line_oled(0, 20, 127, 20, 2, OLED_BLACK);

		if (currentSubCfg == antiRecoilActivationEnum) {
			print(centerX(getStringLength(SETTINGSAAP[antiRecoilActivationEnum]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[antiRecoilActivationEnum]); // print Profile
			print(centerX(getStringLength(arActivation[settings[currentSubCfg]]), OLED_FONT_SMALL_WIDTH),45, OLED_FONT_SMALL, OLED_BLACK,arActivation[settings[currentSubCfg]]); // print Profile

		} else if (currentSubCfg == antiRecoilVerticalEnum) {
			print(centerX(getStringLength(SETTINGSAAP[antiRecoilVerticalEnum]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[antiRecoilVerticalEnum]); // print Profile 2
			drawProgressBarWithCursor(15, 40, 100, 10, antiRecoilVertical[profileId], settingMinMax[antiRecoilVerticalEnum][0], settingMinMax[antiRecoilVerticalEnum][1]);
			NumberToString(antiRecoilVertical[profileId],FindDigits(antiRecoilVertical[profileId]), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);
		} else if (currentSubCfg == antiRecoilHorizontalEnum) {
			print(centerX(getStringLength(SETTINGSAAP[antiRecoilHorizontalEnum]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[antiRecoilHorizontalEnum]); // print Profile 2
			drawProgressBarWithCursor(15, 40, 100, 10, antiRecoilHorizontal[profileId], settingMinMax[antiRecoilHorizontalEnum][0], settingMinMax[antiRecoilHorizontalEnum][1]);
			NumberToString(antiRecoilHorizontal[profileId],FindDigits(antiRecoilHorizontal[profileId]), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);
		}

		if(press_hold(XB1_LEFT)) {
			if (currentSubCfg == antiRecoilVerticalEnum) {
				antiRecoilVertical[profileId] = clamp(antiRecoilVertical[profileId] - 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			} else  if (currentSubCfg == antiRecoilHorizontalEnum) {
				antiRecoilHorizontal[profileId] = clamp(antiRecoilHorizontal[profileId] - 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			} else {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] - 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			}
		}

		if(press_hold(XB1_RIGHT)) {
			if (currentSubCfg == antiRecoilVerticalEnum) {
				antiRecoilVertical[profileId] = clamp(antiRecoilVertical[profileId] + 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			} else if (currentSubCfg == antiRecoilHorizontalEnum) {
				antiRecoilHorizontal[profileId] = clamp(antiRecoilHorizontal[profileId] + 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			} else {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] + 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			}
		}

		if(press_hold(XB1_UP) || press_hold(XB1_DOWN) ) {
			currentSubCfg += 1;
		}


		if (currentSubCfg <  antiRecoilVerticalEnum) {
			currentSubCfg = antiRecoilVerticalEnum;
		} else if (currentSubCfg > antiRecoilActivationEnum) {
			currentSubCfg = antiRecoilVerticalEnum  ;
		}
	}
	else if (AimAssistRocketEnum == modMenu) {

		if(AimAssistRocketEnum == modMenu) {
			print(centerX(getStringLength(addr(MODNAME[AimAssistRocketEnum])), OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr( MODNAME[AimAssistRocketEnum] ) );
		}

		line_oled(0, 20, 127, 20, 2, OLED_BLACK);
		print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[currentSubCfg]); // print Profile 2

		if (currentSubCfg == AAShapeEnum) {
			print(centerX(getStringLength(SHAPES[aimAssistShape[profileId]]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,SHAPES[aimAssistShape[profileId]]); // print Profile 2

		} else if (currentSubCfg == DynamicFactorEnum || currentSubCfg == OutSideFocusEnum) {
			print(centerX(getStringLength(ONOFF[settings[currentSubCfg]]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,ONOFF[settings[currentSubCfg]]); // print Profile 2
		} else {
			drawProgressBarWithCursor(15, 40, 100, 10, settings[currentSubCfg], settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			NumberToString(settings[currentSubCfg],FindDigits(settings[currentSubCfg]), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);
		}

		if(press_hold(XB1_LEFT)) {
			if (currentSubCfg != AAShapeEnum) {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] - 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			} else {
	            aimAssistShape[0] = iif(aimAssistShape[profileId] > 0, aimAssistShape[profileId] - 1, HelixEnum);
	            aimAssistShape[1] = aimAssistShape[0];
	            aimAssistShape[2] = aimAssistShape[0];
			}
		}

		if(press_hold(XB1_RIGHT)) {
			if (currentSubCfg != AAShapeEnum) {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] + 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			} else {
	            aimAssistShape[0] = iif(aimAssistShape[profileId] < HelixEnum, aimAssistShape[profileId] + 1 , 0);
	            aimAssistShape[1] = aimAssistShape[0];
	            aimAssistShape[2] = aimAssistShape[0];
			}
		}

		if(press_hold(XB1_UP)) {
			currentSubCfg -= 1;
		}

		if(press_hold(XB1_DOWN)) {
			currentSubCfg += 1;
		}

		// Loop
		if (currentSubCfg > HeadShotTimerEnum) {
			currentSubCfg = 0;
		} else if (currentSubCfg < 0 ) {
			currentSubCfg = HeadShotTimerEnum;
		}
	}

	else if (HoldBreathModEnum == modMenu) {
		if (currentSubCfg > CooldownTimerEnum) {
			currentSubCfg = BreathTimerEnum;
		} else if (currentSubCfg < BreathTimerEnum ) {
			currentSubCfg = CooldownTimerEnum;
		}
		print(centerX(getStringLength( addr(MODNAME[modMenu])) , OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr(MODNAME[modMenu]) );

		line_oled(0, 20, 127, 20, 2, OLED_BLACK);
		print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[currentSubCfg]); // print Profile 2

		if (currentSubCfg == CooldownTimerEnum) {
			drawProgressBarWithCursor(15, 40, 100, 10, settings[currentSubCfg] * 100 , settingMinMax[currentSubCfg][0] * 100, settingMinMax[currentSubCfg][1] * 100);
			NumberToString(settings[currentSubCfg] * 100 ,FindDigits(settings[currentSubCfg] * 100 ), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);
		} else  {

			drawProgressBarWithCursor(15, 40, 100, 10, settings[currentSubCfg] , settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			NumberToString(settings[currentSubCfg] ,FindDigits(settings[currentSubCfg] ), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);
		}

		if(press_hold(XB1_LEFT)) {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] - 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
		}

		if(press_hold(XB1_RIGHT)) {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] + 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
		}

		if(press_hold(XB1_UP)) {
			currentSubCfg -= 1;
		}

		if(press_hold(XB1_DOWN)) {
			currentSubCfg += 1;
		}

	} else if (EnemyPingEnum == modMenu) {
		currentSubCfg = EnemyPingTimerTriggerEnum;
		print(centerX(getStringLength( addr(MODNAME[modMenu]) ), OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr( MODNAME[modMenu]) );

		line_oled(0, 20, 127, 20, 2, OLED_BLACK);
		print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[currentSubCfg]); // print Profile 2


		drawProgressBarWithCursor(15, 40, 100, 10, settings[EnemyPingTimerTriggerEnum], settingMinMax[EnemyPingTimerTriggerEnum][0], settingMinMax[EnemyPingTimerTriggerEnum][1]);
		NumberToString(settings[EnemyPingTimerTriggerEnum],FindDigits(settings[EnemyPingTimerTriggerEnum]), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);

		if(press_hold(XB1_LEFT)) {
				settings[EnemyPingTimerTriggerEnum] = clamp(settings[EnemyPingTimerTriggerEnum] - 1, settingMinMax[EnemyPingTimerTriggerEnum][0], settingMinMax[EnemyPingTimerTriggerEnum][1]);
		}

		if(press_hold(XB1_RIGHT)) {
				settings[EnemyPingTimerTriggerEnum] = clamp(settings[EnemyPingTimerTriggerEnum] + 1, settingMinMax[EnemyPingTimerTriggerEnum][0], settingMinMax[EnemyPingTimerTriggerEnum][1]);
		}
	} else if (SlideCancelEnum == modMenu) {

		currentSubCfg = SlideCancelDelayEnum;

		print(centerX(getStringLength( addr(MODNAME[modMenu]) ), OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr( MODNAME[SlideCancelEnum]) );

		line_oled(0, 20, 127, 20, 2, OLED_BLACK);
		print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[currentSubCfg]); // print Profile 2


		drawProgressBarWithCursor(15, 40, 100, 10, settings[SlideCancelDelayEnum], settingMinMax[SlideCancelDelayEnum][0], settingMinMax[SlideCancelDelayEnum][1]);
		NumberToString(settings[SlideCancelDelayEnum],FindDigits(settings[SlideCancelDelayEnum]), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);

		if(press_hold(XB1_LEFT)) {
			settings[SlideCancelDelayEnum] = clamp(settings[SlideCancelDelayEnum] - 1, settingMinMax[SlideCancelDelayEnum][0], settingMinMax[SlideCancelDelayEnum][1]);
		}

		if(press_hold(XB1_RIGHT)) {
			settings[SlideCancelDelayEnum] = clamp(settings[SlideCancelDelayEnum] + 1, settingMinMax[SlideCancelDelayEnum][0], settingMinMax[SlideCancelDelayEnum][1]);
		}
	} else if (RapidFireEnum == modMenu) {
		if (currentSubCfg > rapidFireHoldTimeEnum) {
			currentSubCfg = rapidFireShotsPerSecondEnum;
		} else if (currentSubCfg < rapidFireShotsPerSecondEnum ) {
			currentSubCfg = rapidFireHoldTimeEnum;
		}
		print(centerX(getStringLength( addr(MODNAME[modMenu])) , OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr(MODNAME[modMenu]) );

		line_oled(0, 20, 127, 20, 2, OLED_BLACK);
		print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[currentSubCfg]); // print Profile 2



			drawProgressBarWithCursor(15, 40, 100, 10, settings[currentSubCfg] , settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
			NumberToString(settings[currentSubCfg] ,FindDigits(settings[currentSubCfg] ), OLED_FONT_SMALL,OLED_FONT_SMALL_WIDTH, cursor_position - 2 , 55, OLED_BLACK);


		if(press_hold(XB1_LEFT)) {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] - 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
		}

		if(press_hold(XB1_RIGHT)) {
				settings[currentSubCfg] = clamp(settings[currentSubCfg] + 1, settingMinMax[currentSubCfg][0], settingMinMax[currentSubCfg][1]);
		}

		if(press_hold(XB1_UP)) {
			currentSubCfg -= 1;
		}

		if(press_hold(XB1_DOWN)) {
			currentSubCfg += 1;
		}

	} else if (MiscEnum == modMenu) {
		print(centerX(getStringLength( addr(MODNAME[modMenu]) ), OLED_FONT_SMALL_WIDTH), 5, OLED_FONT_SMALL, OLED_BLACK, addr( MODNAME[modMenu]) );
		line_oled(0, 20, 127, 20, 2, OLED_BLACK);
		print(centerX(getStringLength(SETTINGSAAP[currentSubCfg]), OLED_FONT_SMALL_WIDTH),25, OLED_FONT_SMALL, OLED_BLACK,SETTINGSAAP[currentSubCfg]); // print Profile 2

		if (currentSubCfg == InvertEnum) {
			if (settings[InvertEnum] == 1) {
				print(centerX(getStringLength(ONOFF[0]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,ONOFF[0]);
			} else {
				print(centerX(getStringLength(ONOFF[1]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,ONOFF[1]);
			}
		} else if (currentSubCfg == NoRumbleEnum) {
			print(centerX(getStringLength(ONOFF[settings[NoRumbleEnum]]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,ONOFF[settings[NoRumbleEnum]]);
		}  else if (currentSubCfg == buttonLayoutEnum) {
			print(centerX(getStringLength(BtnLayouts[settings[buttonLayoutEnum]]), OLED_FONT_SMALL_WIDTH),45, OLED_FONT_SMALL, OLED_BLACK , BtnLayouts[settings[buttonLayoutEnum]]);
		} else if (currentSubCfg == jumpShotProfile1Enum) {
			print(centerX(getStringLength(ONOFF[settings[jumpShotProfile1Enum]]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,ONOFF[settings[jumpShotProfile1Enum]]);
		} else if (currentSubCfg == jumpShotProfile2Enum) {
			print(centerX(getStringLength(ONOFF[settings[jumpShotProfile2Enum]]), OLED_FONT_MEDIUM_WIDTH),40, OLED_FONT_MEDIUM, OLED_BLACK ,ONOFF[settings[jumpShotProfile2Enum]]);
		} else if (currentSubCfg == BunnyHopEnum ) {
			print(centerX(getStringLength(ONOFF[settings[currentSubCfg]]), OLED_FONT_MEDIUM_WIDTH), 40, OLED_FONT_MEDIUM, OLED_BLACK, ONOFF[settings[currentSubCfg]]);
		}

		if(press_hold(XB1_LEFT)) {
			if (currentSubCfg == InvertEnum) {
				if (settings[InvertEnum] == 1) {
					settings[InvertEnum] = -1;
				} else {
					settings[InvertEnum] = 1;
				}
			} else if (currentSubCfg == NoRumbleEnum) {
				settings[NoRumbleEnum] = !settings[NoRumbleEnum];
				if(!settings[NoRumbleEnum]) {
					reset_rumble();
				} else {
				    block_rumble();
				}
			} else if (currentSubCfg == buttonLayoutEnum) {
				settings[buttonLayoutEnum] =  clamp(settings[buttonLayoutEnum] - 1, 0 , 21);
				setButtonsLayout(settings[buttonLayoutEnum]);
			} else if (currentSubCfg == BunnyHopEnum) {
				settings[BunnyHopEnum] = !settings[BunnyHopEnum];
			}
		}

		if(press_hold(XB1_RIGHT)) {
			if (currentSubCfg == InvertEnum) {
				if (settings[InvertEnum] == 1) {
					settings[InvertEnum] = -1;
				} else {
					settings[InvertEnum] = 1;
				}
			} else if (currentSubCfg == NoRumbleEnum) {
				settings[NoRumbleEnum] = !settings[NoRumbleEnum];
			} else if (currentSubCfg == jumpShotProfile1Enum) {
				settings[jumpShotProfile1Enum] = !settings[jumpShotProfile1Enum];
			} else if (currentSubCfg == jumpShotProfile2Enum) {
				settings[jumpShotProfile2Enum] = !settings[jumpShotProfile2Enum];
			} else if (currentSubCfg == buttonLayoutEnum) {
				settings[buttonLayoutEnum] =  clamp(settings[buttonLayoutEnum] + 1, 0 , 21);
				setButtonsLayout(settings[buttonLayoutEnum]);
			} else if (currentSubCfg == BunnyHopEnum) {
				settings[BunnyHopEnum] = !settings[BunnyHopEnum];
			}
		}

		if(press_hold(XB1_UP)) {
			currentSubCfg -= 1;
		}

		if(press_hold(XB1_DOWN)) {
			currentSubCfg += 1;
		}
		if (currentSubCfg > BunnyHopEnum ) {
			currentSubCfg = InvertEnum;
		} else if (currentSubCfg < InvertEnum ) {
			currentSubCfg = BunnyHopEnum;
		}
	}

	handleExitAndSave();
}

function mainMenuProfileHandling() {
	if (event_press(XB1_RB)) {
		profileHandling(0);
	}

	if (event_press(XB1_LB)) {
		profileHandling(1)
	}
}

function profileHandling(action) {
	if (action == 0) {
		profileId = clamp(profileId + 1, Profile1Enum, Profile2Enum);
	}

	if (action == 1) {
		profileId = clamp(profileId - 1, Profile1Enum, Profile2Enum);
	}
}

function switchProfile() {
	if (profileId == Profile1Enum) {
		resetToProfile2();
	} else {
		resetToProfile1();
	}
}

function resetToProfile1() {
	profileId = Profile1Enum;
	currentLedColor = Red;
	SetLEDColor(currentLedColor);
}

function resetToProfile2() {
	profileId = Profile2Enum;

	currentLedColor = White;
	SetLEDColor(currentLedColor);
}

// (Made By Batts)
function centerX(f_chars,f_font) {
//  centerX(number of chars,font size);
//	return X for Centering String Horizontally
    return (OLED_WIDTH / 2) - ((f_chars * f_font) / 2);
}

// (Made By Batts)
function centerY(f_size) {
//  centerY(font size);
//	return Y for Centering String Vertically

    return (OLED_HEIGHT  / 2) - (f_size / 2);
}

function SetLEDColor(color) {
	if (vehiculeMod) {
		return;
	}
	set_hsb(Color[color][Hue], Color[color][Saturation], Color[color][Brightness]);
}

function displayLine(x, y, endX, endY, height, color) {
	line_oled(x, y, endX, endY, height, color);
}



int dynamicArrowColor;
function displayMiddleLine(arrowLeft, arrowRight, lButton, rButton, lineX, lineY, lineColor) {
	dynamicArrowColor = !lineColor;
	line_oled(lineX, lineY, 127, lineY, 15, lineColor);

	if (arrowLeft) {
   		displayArrowLeft(5, lineY + 7, 50, dynamicArrowColor);
	}
	if (arrowRight) {
		displayArrowRight(115, lineY + 7 , 50, dynamicArrowColor);
	}
	if (lButton) {
		putc_oled(1, ASCII_UPPER_L);
		putc_oled(2, ASCII_UPPER_B);
   		puts_oled(5, lineY, OLED_FONT_SMALL, 2, dynamicArrowColor);
	}
	if (rButton) {
   		putc_oled(1, ASCII_UPPER_R);
		putc_oled(2, ASCII_UPPER_B);
    	puts_oled(110, lineY, OLED_FONT_SMALL, 2, dynamicArrowColor);
	}
}

int sizeArray;
function displayArrowRight( dar_x,  dar_y,  dar_sizePercent, dar_color) {
    sizeArray = (dar_sizePercent * 10) / 100;
    line_oled(dar_x, dar_y, dar_x + sizeArray, dar_y, 1, dar_color);
    line_oled(dar_x + sizeArray, dar_y, dar_x + sizeArray - (sizeArray / 2), dar_y - (sizeArray / 2), 1, dar_color);
    line_oled(dar_x + sizeArray, dar_y, dar_x + sizeArray - (sizeArray / 2), dar_y + (sizeArray / 2), 1, dar_color);
}

function displayArrowLeft( dal_x, dal_y, dal_sizePercent, dal_color) {
    sizeArray = (dal_sizePercent * 10) / 100;

    line_oled(dal_x, dal_y, dal_x + sizeArray, dal_y, 1, dal_color);
    line_oled(dal_x, dal_y, dal_x + (sizeArray / 2), dal_y - (sizeArray / 2), 1, dal_color);
    line_oled(dal_x, dal_y, dal_x + (sizeArray / 2), dal_y + (sizeArray / 2), 1, dal_color);
}


// Credit to Swizzy
int stringLength;
function getStringLength(offset) {
    stringLength = 0;
    do {
        offset++;
        stringLength++;
    } while (duint8(offset));
    return stringLength;
}

const int16 messagePositions[] =
{60,68,76,84,92,100,108,116,124,132,140,148,156,164,
                     172,180,188,196,204,212,220,228,236,244,252,260,268,276};

const int8 messageArrayXbox[] = {
    ASCII_UPPER_P,
    ASCII_UPPER_R,
    ASCII_UPPER_E,
    ASCII_UPPER_S,
    ASCII_UPPER_S,
    ASCII_SPACE,
    ASCII_UPPER_L,
    ASCII_UPPER_T,
    ASCII_PLUS,
    ASCII_UPPER_M,
    ASCII_UPPER_E,
    ASCII_UPPER_N,
    ASCII_UPPER_U,
    ASCII_SPACE,
    ASCII_UPPER_T,
    ASCII_UPPER_O,
    ASCII_SPACE,
    ASCII_UPPER_O,
    ASCII_UPPER_P,
    ASCII_UPPER_E,
    ASCII_UPPER_N,
    ASCII_SPACE,
    ASCII_UPPER_S,
    ASCII_UPPER_E,
    ASCII_UPPER_T,
    ASCII_UPPER_U,
    ASCII_UPPER_P,
    ASCII_SPACE
};

const int8 messageArrayPS5[] = {
    ASCII_SPACE,
    ASCII_SPACE,
    ASCII_SPACE,
    ASCII_UPPER_L,
    ASCII_DIGIT2,
    ASCII_PLUS,
    ASCII_UPPER_O,
    ASCII_UPPER_P,
    ASCII_UPPER_T,
    ASCII_UPPER_I,
    ASCII_UPPER_O,
    ASCII_UPPER_N,
    ASCII_UPPER_S,
    ASCII_SPACE,
    ASCII_UPPER_T,
    ASCII_UPPER_O,
    ASCII_SPACE,
    ASCII_UPPER_O,
    ASCII_UPPER_P,
    ASCII_UPPER_E,
    ASCII_UPPER_N,
    ASCII_SPACE,
    ASCII_UPPER_S,
    ASCII_UPPER_E,
    ASCII_UPPER_T,
    ASCII_UPPER_U,
    ASCII_UPPER_P,
    ASCII_SPACE,
    ASCII_SPACE
};


// Display scrolling text on OLED
int offset = 0;
int iScroll =0;
function displayPressToOpenMenu() {
	for(iScroll = 0; iScroll < 28; iScroll++) {
		if (get_controller() == PIO_PS5 || get_controller() == PIO_PS4) {
			 displayChar(messageArrayPS5[iScroll],  messagePositions[iScroll], 47, OLED_BLACK);
		} else {
			displayChar(messageArrayXbox[iScroll],  messagePositions[iScroll], 47, OLED_BLACK);
		}
	}
	offset = offset + 1;
}

// Helper function to simplify character printing
function displayChar(ascii_char, initial_pos, yPosition, color) {
    putc_oled(1, ascii_char);
    puts_oled(initial_pos - offset, yPosition, 0, 1, color);
}

/// Mod Helper

// Alternative for the ternary operator
function iif(expression, truepart, falsepart) {
	// evaluate if expression is true
	if(expression) {
		return truepart; // Return truepart
	}

	// Else, return falsepart
	return falsepart;
}

function output(stick, value) {
	set_val(stick, clamp(value * (32767 - abs(get_val(stick))) / 32768 + get_val(stick), -32768, 32767));
}

int noise, adjustment;
function outputV2(stick, value) {
    noise = random(-5, 5);
    adjustment = (value * 327) + noise;
    set_val(stick, clamp(get_val(stick) + adjustment, -32767, 32767) * settings[InvertEnum]);
}

int bufferIndex,digitIndex,charIndex ;
function NumberToString(f_val,f_digits, fontSize, fontSizeWidth, xPosition, yPosition, color) {
    bufferIndex = 1;
    digitIndex = 10000;
    if(f_val < 0) {
         putc_oled(bufferIndex,45);
         bufferIndex += 1;
         f_val = abs(f_val);
    }
    for(charIndex = 5; charIndex >= 1; charIndex--) {
        if(f_digits >= charIndex) {
            putc_oled(bufferIndex,(f_val / digitIndex) + 48);
            f_val %= digitIndex;
            bufferIndex ++;
            if(charIndex == 4) {
                putc_oled(bufferIndex,44);
                bufferIndex ++;
            }
        }
        digitIndex /= 10;
    }
    puts_oled(iif(xPosition > 127, centerX(bufferIndex - 1, fontSizeWidth), xPosition) , yPosition, fontSize, bufferIndex - 1,color);
 }


// Credit to JBaze122
int logVal;
function FindDigits(num) {
   logVal = 0;
   do {
      num /= 10;
      logVal++;
   } while (num);
   return logVal;
}


function press_hold(f_btn) {
    //  return TRUE - event_press()
    //  - every 250 ms when button is held

    return event_press(f_btn) || (get_ival(f_btn) && get_ptime(f_btn) >= 500);
    //&& get_ptime(f_btn) % (get_rtime() * 8) == 0;
}

function handleUserOffSateInput() {
	if (get_val(XB1_LT) && event_release(XB1_VIEW)) {
		combo_stop(DISPLAY_DESACTIVATED);
	 	currentState = STATE_RESTART;
	}
}


// Handle all user inputs.
function handleUserPlayingSateInput() {

	if (get_val(XB1_LT) && event_release(XB1_VIEW)) {
		block_all_inputs();
	 	currentState = STATE_OFF;
	}

	if (get_val(XB1_LT) && get_val(XB1_MENU)) {
    	set_val(XB1_MENU, 0);
    	set_val(XB1_LT, 0);
    }

	if (get_val(XB1_LT) && event_release(XB1_MENU)) {
		block_all_inputs();
        currentState = STATE_SETUP_MENU; // Open Setup menu
    }

    if (get_val(ADS_BTN) && get_val(XB1_LEFT)) {
    	set_val(XB1_LEFT, 0);
    }

   	if (get_val(ADS_BTN) && event_release(XB1_RIGHT)) {
   		//combo_stop(DISPLAY_HELPER_MENU);
   		combo_run(ToggleRapidFireStatus);
    	toggle[ToggleRapidFireEnum] = !toggle[ToggleRapidFireEnum];
    }

   	if (get_val(ADS_BTN) && event_release(XB1_LEFT)) {
   		//combo_stop(DISPLAY_HELPER_MENU);
   		quickToggleModId = AntiRecoilEnum;
   		tempState = STATE_QUICK_TOGGLE;
    	currentState = STATE_CLEAN_SCREEN;
    }

	if (get_val(XB1_VIEW)) {
		initScreenSaver();
	}


	if(toggle[ToggleRapidFireEnum]) {
		rapidFire();
	}

	if(toggle[ToggleEnemyPingEnum]) {
		EnemyPing();
	}

	if (toggleAutoRun) {
		if (!combo_running(AutoRun)) {
			combo_run(AutoRun);
		}
    }

    if (!combo_running(DeadzoneCorrection)) {
		combo_run(DeadzoneCorrection);
	}

	if (settings[NoRumbleEnum]) {
   			block_rumble();
	}

	// afk Loop
    if (toggleAntiAfk) {
		antiAfk();
    } else {
    	if(combo_running(antiafk)){
    		combo_stop(antiafk);
    	}
    }

    if (toggle[HoldBreathEnum]) {
    	handleBreathTime();
	}

	if (profileId == Profile1Enum && settings[jumpShotProfile1Enum]) {
		bunnyHopToggle = TRUE;
	} else if (profileId == Profile2Enum && settings[jumpShotProfile2Enum]) {
		bunnyHopToggle = TRUE;
	} else {
		bunnyHopToggle = FALSE;
	}

	if(bunnyHopToggle) {
    	if (get_ptime(FIRE_BTN) > 200 && get_val(FIRE_BTN)) {
    		combo_run(BunnyHop);
    	}
	}

	if(settings[BunnyHopEnum]) {
    	if (get_ptime(JUMP_BTN) > 200 && get_val(JUMP_BTN)) {
    		combo_run(BunnyHop);
    	}
	}


	if(toggle[ToggleSlideCancelEnum]) {
		if( abs(get_val(XB1_LY)) > 80 || abs(get_val(XB1_LX)) > 80 ) {
			if(event_release(CROUCH_BTN)) {
				if (!combo_running(SLIDE_CANCEL)) {
					combo_run(SLIDE_CANCEL);
				}
			}
		}

		if((get_val(XB1_LY) < -80) || (get_val(XB1_LY) > 80) || (get_val(XB1_LX) < -80) || (get_val(XB1_LX) > 80)){
			if(event_release(CROUCH_BTN)){
				combo_run(SLIDE_CANCEL)
		    }
			if(combo_running(SLIDE_CANCEL) && (get_val(ADS_BTN) && event_release(CROUCH_BTN))) {
	            combo_stop(SLIDE_CANCEL)
	        }
		}
	}


	if (!get_val(XB1_VIEW) && event_release(SWITCHWEAPON_BTN)) {
		switchProfile();
	}

	if (get_val(XB1_VIEW) && get_val(SWITCHWEAPON_BTN)) {
		block(SWITCHWEAPON_BTN, 1000);
		block(XB1_VIEW, 1000);
		resetToProfile1();
	}
	if (get_val(XB1_VIEW) && get_val(CROUCH_BTN)) {
		block(CROUCH_BTN, 1000);
		block(XB1_VIEW, 1000);
		resetToProfile2();
	}

	// Handle Vehicule Mod.
	setVehiculeMod();

	isVibrating = isVibrating();
	if (toggleAntiRecoil[profileId] && isVibrating && !toggleAimAssistRocket  && !vehiculeMod) {
		if (antirecoilActivation(settings[antiRecoilActivationEnum])) {
			if (!combo_running(ANTIRECOIL)) {
				combo_run(ANTIRECOIL);
			}
		} else {
			if (combo_running(ANTIRECOIL)) {
				combo_stop(ANTIRECOIL);
			}
		}
	}

	if (toggleAimAssistRocket == TRUE && !vehiculeMod) {
			aimAssistRocket();
	}
}

fcombo ToggleRapidFireStatus {
	rect_oled(10, 10, 110, 50 ,1, 0);
	print(centerX(getStringLength( addr(MODNAME[RapidFireEnum])) , OLED_FONT_SMALL_WIDTH), 20, OLED_FONT_SMALL, OLED_WHITE, addr(MODNAME[RapidFireEnum]) );
	print(centerX(getStringLength(ONOFF[toggle[ToggleRapidFireEnum]]), OLED_FONT_LARGE_WIDTH) ,30,OLED_FONT_LARGE,OLED_WHITE,ONOFF[toggle[ToggleRapidFireEnum]]);
	wait(1000);
	combo_stop(ToggleRapidFireStatus);
	if (currentState == STATE_SCREEN_SAVER) {
		tempState = STATE_SCREEN_SAVER;
		previousState = STATE_SCREEN_SAVER;
	} else {
		tempState = STATE_PLAYING;
	}
	currentState = STATE_CLEAN_SCREEN;
}


function antirecoilActivation(setting){

	if(setting == 0){
		if(get_ival(ADS_BTN) && get_val(FIRE_BTN)){
			return TRUE;
		}
	}
	if(setting == 1){
		if(get_ival(ADS_BTN) || get_val(FIRE_BTN)){
			return TRUE;
		}
	}
	if(setting == 2){
		if((get_ival(ADS_BTN) && get_val(FIRE_BTN)) || get_val(FIRE_BTN)){
			return TRUE;
		}
	}

	if(setting == 3){
		if(get_ival(ADS_BTN) || (get_val(ADS_BTN) && get_val(FIRE_BTN))){
			return TRUE;
		}
	}

	if(setting == 4){
		if(get_ival(ADS_BTN) || get_ival(FIRE_BTN) || (get_val(ADS_BTN) && get_val(FIRE_BTN))){
			return TRUE;
		}
	}
	return 0;
}

function handleBreathTime() {
	BreathTime = settings[BreathTimerEnum] * 1000;
	StartBreathTime = settings[TimeBeforeBreathActivationEnum] * 1000;
	CooldownTime = settings[CooldownTimerEnum] * 100;

    // Ensure XB1_LS is only activated when XB1_LT or XB1_LS is used
    if (get_ival(ADS_BTN) || get_ival(SPRINT_BTN)) {
        if (!HoldBreathActive) {
            HoldBreathActive = TRUE;
            BreathTimer = 0;
            CooldownTimer = 0;
            StartTimer = 0;
            InitialActivation = TRUE; // Ensure StartBreathTime is applied only at the beginning
        }

        // Handle initial delay with StartBreathTime
        if (InitialActivation && StartTimer < StartBreathTime) {
            StartTimer += get_rtime();
        }
        // After initial delay, manage cycle with BreathTime and CooldownTime
        else if (BreathTimer < BreathTime) {
            set_val(SPRINT_BTN, 100); // Activate LS only when LT or LS is pressed
            BreathTimer += get_rtime();
            InitialActivation = FALSE; // Switch to normal cycle
        } else if (CooldownTimer < CooldownTime) {
            set_val(SPRINT_BTN, 0); // Stop holding breath during cooldown
            CooldownTimer += get_rtime();
        } else {
            // Reset timers for a new cycle
            BreathTimer = 0;
            CooldownTimer = 0;
        }
    } else {
        // If neither LT nor LS is pressed, reset everything and keep LS inactive
        HoldBreathActive = FALSE;
        BreathTimer = 0;
        CooldownTimer = 0;
        StartTimer = 0;
        InitialActivation = TRUE;
        set_val(SPRINT_BTN, 0); // Ensure LS is not activated when LT and LS are not in use
    }

    // Condition to stop HoldBreath if specific actions are detected
    if (get_ival(XB1_LY) < -90 && get_ival(ADS_BTN) && get_ptime(ADS_BTN) > 200) {
        HoldBreathActive = FALSE;
        BreathTimer = 0;
        CooldownTimer = 0;
        StartTimer = 0;
        InitialActivation = TRUE;
        set_val(SPRINT_BTN, 0); // Keep LS inactive when stopping HoldBreath
	}

	// Condition to restart a new cycle if needed
	if (event_press(ADS_BTN) || event_press(ADS_BTN) ||
		(HoldBreathActive && !InitialActivation && BreathTimer >= BreathTime && CooldownTimer >= CooldownTime)) {
		BreathTimer = 0;
		CooldownTimer = 0;
		StartTimer = 0; // Reset timers for a new cycle
	}
}

function EnemyPing() {
    enemyPingTime = settings[EnemyPingTimerTriggerEnum];

    // If RT or LT is pressed, start counting the time
    if (get_ival(FIRE_BTN)) {
        EnemyPingTimer += get_rtime(); // Increment time using runtime function
		//set_val(TRACE_1, EnemyPingTimer); // Keep LS inactive when stopping HoldBreath
        if (EnemyPingTimer / 1000 >= enemyPingTime) {
            if (!combo_running(ComboEnemyPing)) {
                combo_run(ComboEnemyPing);
            }
        }
    } else {
        // Reset timer when no relevant input is detected
        EnemyPingTimer = 0;
        if (combo_running(ComboEnemyPing)) {
            combo_stop(ComboEnemyPing);
        }
    }
}

int boostStrength, valRX, valRY;
int activationRangeMin, activationRangeMax;
int inActivationRange;
int antiRecoilY = 0;
int antiRecoilX = 0;
int isVibrating;

function aimAssistRocket() {

    activationRangeMin = settings[activationRangeMinEnum];
    activationRangeMax = settings[activationRangeMaxEnum];
    boostStrength = settings[boostStrengthEnum] / 10;

    RX = get_val(XB1_RX);
    RY = get_val(XB1_RY);
    actual_Magnitude = isqrt(pow(RX, 2) + pow(RY, 2));
    max_Magnitude = (actual_Magnitude < 100);

	isVibrating = isVibrating();

    updateAngle();

    // Calcul de l'anti-recul vertical
    if (antirecoilActivation(settings[antiRecoilActivationEnum])  == TRUE) {
    	antiRecoilY = calculateAntiRecoilYVibrating();
    	antiRecoilX = calculateAntiRecoilXVibrating();
	} else {
		antiRecoilY =  0;
		antiRecoilX =  0;
	}

    // Correction des valeurs en fonction de la magnitude
    // adjustAngleValuesDependingSmoothingFactor();

	adjustAngleValues();
    handleActivation();
}

function isVibrating() {
	return TRUE;
}

function updateAngle() {
    if (!(time++ % 1)) {
        angle += settings[RightSpeedEnum];
    }

    sin_angle = sin(angle)  / 200;
    cos_angle = cos(angle) / 200;
}

function handleActivation() {
    if (event_release(FIRE_BTN) || event_release(ADS_BTN)) {
        resetAngleAndCombo();
    } else if (isAimingActive()) {
        handleAimAssist();
    }
}

function resetAngleAndCombo() {
    angle = 0;
    if (event_release(ADS_BTN)) {
        combo_stop(LeftStickAimAssistRocket);
    }
}

function isAimingActive() {
    return (settings[OutSideFocusEnum] && get_ival(ADS_BTN)) ||
           (get_ival(ADS_BTN) && get_ival(FIRE_BTN)) ||
           get_ival(FIRE_BTN);
}

function handleAimAssist() {
    if (settings[LeftSpeedEnum]) {
        stopDeadzoneCorrection();
        if (!combo_running(LeftStickAimAssistRocket)) {
            combo_run(LeftStickAimAssistRocket);
        }
    }

    inActivationRange = isInActivationRange();
    GetShapes(settings[RightSizeEnum]);

    if (inActivationRange) {
        applyBoostedOutput();
    } else {
        applyNormalOutput();
    }
}

function isInActivationRange() {
    return (abs(RX) > activationRangeMin || abs(RY) > activationRangeMin) &&
           (abs(RX) < activationRangeMax || abs(RY) < activationRangeMax);
}

int hsHelper;

function applyBoostedOutput() {
    outputV2(POLAR_RX, boostStrength * cos_angle + antiRecoilX );
	if (antirecoilActivation(settings[antiRecoilActivationEnum]) == TRUE) {
		hsHelper = settings[HeadShotStrengthEnum] * -1;
		if(get_ival(FIRE_BTN) && get_ptime(FIRE_BTN) < settings[HeadShotTimerEnum]) {
			outputV2(POLAR_RY, hsHelper + boostStrength * sin_angle + antiRecoilY);
		} else {
			outputV2(POLAR_RY, boostStrength * sin_angle + antiRecoilY);
		}
	} else {
		outputV2(POLAR_RY, boostStrength * sin_angle);
	}
}

function applyNormalOutput() {
    outputV2(POLAR_RX, cos_angle + antiRecoilX );
    if (antirecoilActivation(settings[antiRecoilActivationEnum])  == TRUE) {
    	hsHelper = settings[HeadShotStrengthEnum] * -1;
		if(get_ival(FIRE_BTN) && get_ptime(FIRE_BTN) < settings[HeadShotTimerEnum]) {
			outputV2(POLAR_RY, hsHelper + sin_angle + antiRecoilY);
		} else {
			outputV2(POLAR_RY, sin_angle + antiRecoilY);
		}
	} else {
		outputV2(POLAR_RY, sin_angle);
	}
}

function calculateAntiRecoilYVibrating() {
    if (isVibrating && toggleAntiRecoil[profileId] == 1 && antiRecoilVertical[profileId]) {
        return antiRecoilVertical[profileId];
    }
    return 0;
}

function calculateAntiRecoilXVibrating() {
    if (isVibrating && toggleAntiRecoil[profileId] == 1 && antiRecoilHorizontal[profileId]) {
        return antiRecoilHorizontal[profileId];
    }
    return 0;
}


int new_sin_angle, new_cos_angle;
int adjustmentFactor;
int dynamicSmoothingFactor;
function adjustAngleValuesDependingSmoothingFactor() {

    dynamicSmoothingFactor = calculateDynamicSmoothingFactor();

    if (actual_Magnitude <= settings[RightSizeEnum]) {
        new_sin_angle = sin_angle - RY;
        new_cos_angle = cos_angle - RX;
    } else {
        adjustmentFactor = (200 - ((abs(RY) + actual_Magnitude) / 10) * 10) / 200;
        new_sin_angle = (sin_angle * adjustmentFactor) * max_Magnitude;
        new_cos_angle = (cos_angle * adjustmentFactor) * max_Magnitude;
    }

    sin_angle = sin_angle * (100 - dynamicSmoothingFactor) / 100 + new_sin_angle * dynamicSmoothingFactor / 100;
    cos_angle = cos_angle * (100 - dynamicSmoothingFactor) / 100 + new_cos_angle * dynamicSmoothingFactor / 100;
}

int aimStrength;
function adjustAngleValues() {
    dynamicSmoothingFactor = calculateDynamicSmoothingFactor(); // Get dynamic smoothing

    if (actual_Magnitude <= settings[RightSizeEnum]) {
        new_sin_angle = sin_angle - RY;
        new_cos_angle = cos_angle - RX;
    } else {
        adjustmentFactor = (200 - ((abs(RY) + actual_Magnitude) / 10) * 10) / 200;
        new_sin_angle = (sin_angle * adjustmentFactor) * max_Magnitude;
        new_cos_angle = (cos_angle * adjustmentFactor) * max_Magnitude;
    }

    // Apply aim lock if enabled
    aimStrength = settings[AimLockStrengthEnum]; // Adjustable aim lock strength

    // Adjust aim assist values dynamically
    new_sin_angle -= (RY * aimStrength / 100);
    new_cos_angle -= (RX * aimStrength / 100);

    // Apply the dynamically calculated smoothing factor
    sin_angle = sin_angle * (100 - dynamicSmoothingFactor) / 100 + new_sin_angle * dynamicSmoothingFactor / 100;
    cos_angle = cos_angle * (100 - dynamicSmoothingFactor) / 100 + new_cos_angle * dynamicSmoothingFactor / 100;
}



int baseSmoothingFactor, magnitudeInfluence, maxSmoothingFactor;
function calculateDynamicSmoothingFactor() {

    baseSmoothingFactor = settings[SmoothingFactorEnum];
    magnitudeInfluence = actual_Magnitude / 10;
    maxSmoothingFactor = 30;

    return min(baseSmoothingFactor + magnitudeInfluence, maxSmoothingFactor);
}

function stopDeadzoneCorrection()  {
	if (combo_running(DeadzoneCorrection)) {
		combo_stop(DeadzoneCorrection);
	}
}


int rapidFireHoldTime, rapidFireRestTime;
int currentShotsPerSec;
int totalCycleTime;
function rapidFire() {
	currentShotsPerSec = settings[rapidFireShotsPerSecondEnum];
    // Calculate hold and rest times based on shots per second
    rapidFireHoldTime = settings[rapidFireHoldTimeEnum];

    // If hold time is not explicitly set, calculate it automatically
	if (rapidFireHoldTime <= 0) {
        rapidFireHoldTime = totalCycleTime / 2;
    }

    // Calculate rest time to maintain consistent firing rate
    totalCycleTime = 1000 / currentShotsPerSec; // total time per shot cycle (ms)
    rapidFireRestTime = totalCycleTime - rapidFireHoldTime;

    // Run or stop the RAPIDFIRE fcombo based on activation type
	if(antirecoilActivation(settings[antiRecoilActivationEnum])  == TRUE) {
		combo_run(RAPIDFIRE);
	} else {
		combo_stop(RAPIDFIRE);
	}
}


////////////////////////
/// Taylor Shape
////////////////////////
int time;
int RX, RY;
int cos_angle, sin_angle;
int SpiralPosition1,SpiralPosition2,InnerSpiral,OuterSpiral;
int actual_Magnitude, max_Magnitude, Position;
int timer;

function GetShapes(f_var) {

    if(!SpiralPosition1)
	{
		InnerSpiral -= 1;
		if(InnerSpiral < 1)
			SpiralPosition1 = TRUE;
	}
	else
	{
	    InnerSpiral += 1;
		if(InnerSpiral > f_var)
			SpiralPosition1 = FALSE;
	}
	if(!SpiralPosition2)
	{
		OuterSpiral -= 1;
		if(OuterSpiral < 1)
			SpiralPosition2 = TRUE;
	}
	else
	{
		OuterSpiral += 1;
		if(OuterSpiral >  f_var)
			SpiralPosition2 = FALSE;
	}
	if(aimAssistShape[profileId] == CircularEnum)
	{
        RY = (sin_angle * f_var) /100;
        RX = (cos_angle * f_var) /100;
	}
	if(aimAssistShape[profileId] == TallOvalEnum)
	{
        RY = (sin_angle * f_var) /100;
        RX = (cos_angle * (f_var / 2)) /100;
	}
	if(aimAssistShape[profileId] == WideOvalEnum)
	{
        RY = (sin_angle * (f_var / 2)) /100;
        RX = (cos_angle * f_var) /100;
	}
	if(aimAssistShape[profileId] == SpiralEnum)
	{
        RY = (sin_angle * InnerSpiral) /100;
        RX = (cos_angle * OuterSpiral) /100;
	}
    if(aimAssistShape[profileId] == HelixEnum)
	{
		RX = (cos_angle * Position) /100;
		RY = (sin_angle * Position) /100;

		if(Position == 0)
		    RX = (cos_angle * f_var) /100;

		if(Position == 1)
			RY = (sin_angle * f_var) /100;

		if(Position == 2)
			RX = (cos_angle * f_var) /100 * -1;

		if(Position == 3)
			RY = (sin_angle * f_var) /100 * -1;

		timer++;
		if(timer >= settings[RightSpeedEnum])
		{
			Position++;
			timer = 0;
		}

		if(Position == 4)
			Position = 0;
    }

	cos_angle = RX;
	sin_angle = RY;
}

//////////////////////////////////////////
////// SAVE FUNCTIONS By Swizzy
///////////////////////////////////////////
int mask;
int ret;
int pmemValue;

function set_15var(pvar, ret, position) { // values range = 0 ~ 1
	for(i = position; i < (1 + position); i++)
	{
		pvar = pvar & (~(1 << i));
	}
	pvar = pvar | (ret << position);

	return pvar;
}

function get_15var(pvar, position){
	mask = 0;
	ret = 0;
	for(i = 0; i < 1 ; i++)
	{
		mask = mask | (1 << i);
	}
	mask = mask << position
	ret = (pvar & mask) >> position
return ret;
}

function set_4var(_1, _2, _3, _4) { // values range = 0 ~ 15
	return 0xff00 & ((0xf0 & (_1 << 4) | _2) << 8) | (0xf0 & (_3 << 4) | _4);
}

function get_4var(f_PMemory, f_dec_pos) {
	return  (f_PMemory >> (4 * f_dec_pos)) & 0x0F;
}

function set_2var(var1, var2) { // values range = -127 ~ 127
	ret = 0;

	if(var1 < 0)
   		var1 = abs(var1) | 0x80;

	ret = (abs(var2) << 8)|var1;

	if(var2 < 0)
		ret *= -1;

	return ret;
}

function get_2var(pvar, var) {
	ret = 0;

	if(var == 0)
	{
		ret = 0x80 & abs(pvar) ;
		ret = ret >> 7;
		ret = ((-2) * ret) + 1;
		ret = (abs(pvar) & 0x7F) * ret;
	}
	else
	{
		ret = pvar >> 8;

	    if(pvar < 0)
			ret += 1;
	}

	return ret;
}

function antiAfk() {
	if(!combo_running(antiafk)){
		combo_run(antiafk);
	}
}

function correctAngle(angle){
  if (angle < 0) angle = 360 + (angle % 360);
  angle = (angle + 90) % 360;
  return angle;
}
function sin(angle){
  return lerp_16(pollarArr[(correctAngle(angle - 1))], pollarArr[(correctAngle(angle + 1))], 0x8000);
}
function cos(angle){
  return lerp_16(pollarArr[((correctAngle(angle - 1) + 90) % 360)],  pollarArr[((correctAngle(angle + 1) + 90) % 360)], 0x8000);
}
function lerp_16(a, b, t) { return fix_to_int(lerp(int_to_fix(a), int_to_fix(b), t)); }
function int_to_fix(a) { return a * 0x10000; }
function fix_to_int(a) { if (a >= 0) return (a + 0x10000 >> 1) / 0x10000; return (a - 0x10000 >> 1) / 0x10000; }
function fix_mul(v1, v2) { return ((v1 >> 8) * (v2 >> 8)); }
function lerp(a, b, f) { return fix_mul((0x10000 - f), a) + fix_mul(f, b); }



function rumbleToUse() {
    if(get_rumble(RUMBLE_A) == get_rumble(RUMBLE_B))
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) == 100)
    {
    	return RUMBLE_B;
	}
	if(get_rumble(RUMBLE_B) == 100)
	{
    	return RUMBLE_A;
	}
    if(get_rumble(RUMBLE_A) > get_rumble(RUMBLE_B))
    {
        return RUMBLE_A;
    }
    if(get_rumble(RUMBLE_A) < get_rumble(RUMBLE_B))
    {
        return RUMBLE_B;
    }
    return 0;
}

function setVmBaseTime(_platform) {
	/*
	if (devMod == TRUE && _platform != PIO_AUTO) {
		vm_tctrl(4 - 10);
		return;
	}
    if (_platform == PIO_PS5 || _platform == PIO_PS4) {
    	vm_tctrl(4 - 10);
    } else {*/
	vm_tctrl(8 - 10);
    //}
}

function setVehiculeMod() {
	if (get_val(FIRE_BTN) && event_press(XB1_RIGHT)) {
	    // Increment the press count for DPAD_RIGHT when FIRE_BTN is held
	    if (vehiculeModFirePress < 1) {
	        vehiculeModFirePress++;
	    }
	    // Toggle vehicle mod when DPAD_RIGHT is pressed twice
	    else if (vehiculeModFirePress == 1) {
	        vehiculeModFirePress = 0; // Reset press counter after toggling
	        SetLEDColor(Purple);
	        vehiculeMod = TRUE;
	    }
	}
	// Deactivate "vehicle mod" when RELOAD_BTN is pressed
	if (vehiculeMod && event_press(RELOAD_BTN)) {
	    vehiculeMod = FALSE;          // Turn off vehicle mod
	    vehiculeModFirePress = 0;     // Reset press counter for future activations
	    SetLEDColor(currentLedColor);
	}
	set_val(TRACE_5,vehiculeMod);
}

/****
* COMBO
********************/


fcombo antiafk {

	set_val(XB1_MENU, 100);
	wait(1360);
	set_val(JUMP_BTN, 100);
	wait(1360);
	set_val(JUMP_BTN, 0);
	wait(1360);
	set_val(JUMP_BTN, 100);
	wait(1360);
	set_val(JUMP_BTN, 0);
	wait(1360);

	wait(4000);


	set_val(ADS_BTN, 100);
    set_val(FIRE_BTN, 100);
	wait(150);
	set_val(XB1_LX, -74);
	set_val(XB1_LY, -80);
	wait(1360);
	set_val(XB1_RX, -77);
	set_val(XB1_LX, -62);
	set_val(XB1_LY, -89);
	wait(220);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, -30);
	set_val(XB1_LY, -100);
	wait(490);
	set_val(XB1_RX, 62);
	set_val(XB1_LX, 29);
	set_val(XB1_LY, -100);
	wait(230);
	set_val(XB1_RX, 73);
	set_val(XB1_LX, 39);
	set_val(XB1_LY, -100);
	wait(200);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, 45);
	set_val(XB1_LY, -98);
	wait(150);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, -89);
	wait(50);
	set_val(XB1_RX, -25);
	set_val(XB1_LX, -76);
	set_val(XB1_LY, -75);
	wait(100);
	set_val(XB1_RX, -41);
	set_val(XB1_LX, -75);
	set_val(XB1_LY, -78);
	wait(90);
	set_val(XB1_RX, -47);
	set_val(XB1_LX, -65);
	set_val(XB1_LY, -88);
	wait(160);
	set_val(XB1_RX, -47);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -84);
	wait(170);
	set_val(XB1_RX, -35);
	set_val(XB1_LX, -69);
	set_val(XB1_LY, -77);
	wait(150);
	set_val(XB1_RX, -49);
	set_val(XB1_LX, -83);
	set_val(XB1_LY, -67);
	wait(50);
	set_val(XB1_RX, -66);
	set_val(XB1_LX, -100);
	set_val(XB1_LY, -26);
	wait(90);
	set_val(XB1_RX, -72);
	set_val(XB1_LX, -100);
	set_val(XB1_LY, 0);
	wait(70);
	set_val(XB1_RX, -69);
	set_val(XB1_LX, -100);
	set_val(XB1_LY, -23);
	wait(130);
	set_val(XB1_RX, -67);
	set_val(XB1_LX, -99);
	set_val(XB1_LY, -36);
	wait(70);
	set_val(XB1_RX, -56);
	set_val(XB1_LX, -65);
	set_val(XB1_LY, -55);
	wait(70);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, -44);
	set_val(XB1_LY, -67);
	wait(70);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, -81);
	wait(150);
	set_val(XB1_LY, -83);
	wait(50);
	set_val(XB1_LY, -93);
	wait(80);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 61);
	set_val(XB1_LY, -92);
	wait(150);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 76);
	set_val(XB1_LY, -82);
	wait(60);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 84);
	set_val(XB1_LY, -74);
	wait(110);
	set_val(XB1_RX, 68);
	set_val(XB1_LX, 84);
	set_val(XB1_LY, -73);
	wait(110);
	set_val(XB1_RX, 56);
	set_val(XB1_LX, 84);
	set_val(XB1_LY, -73);
	wait(70);
	set_val(XB1_RX, 72);
	set_val(XB1_LX, 84);
	set_val(XB1_LY, -73);
	wait(90);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, -94);
	wait(370);
	set_val(XB1_RX, -27);
	set_val(XB1_LX, -24);
	set_val(XB1_LY, -100);
	wait(40);
	set_val(XB1_RX, -45);
	set_val(XB1_LX, -39);
	set_val(XB1_LY, -99);
	wait(50);
	set_val(XB1_RX, -48);
	set_val(XB1_LX, -49);
	set_val(XB1_LY, -96);
	wait(40);
	set_val(XB1_RX, -55);
	set_val(XB1_LX, -58);
	set_val(XB1_LY, -92);
	wait(80);
	set_val(XB1_RX, -59);
	set_val(XB1_LX, -63);
	set_val(XB1_LY, -89);
	wait(30);
	set_val(XB1_RX, -60);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -86);
	wait(40);
	set_val(XB1_RX, -61);
	set_val(XB1_LX, -69);
	set_val(XB1_LY, -84);
	wait(40);
	set_val(XB1_RX, -59);
	set_val(XB1_LX, -70);
	set_val(XB1_LY, -83);
	wait(70);
	set_val(XB1_RX, -55);
	set_val(XB1_LX, -70);
	set_val(XB1_LY, -83);
	wait(40);
	set_val(XB1_RX, -49);
	set_val(XB1_LX, -70);
	set_val(XB1_LY, -83);
	wait(60);
	set_val(XB1_RX, -47);
	set_val(XB1_LX, -68);
	set_val(XB1_LY, -85);
	wait(50);
	set_val(XB1_RX, -49);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -87);
	wait(60);
	set_val(XB1_RX, -51);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -87);
	wait(130);
	set_val(XB1_RX, -53);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -67);
	wait(160);
	set_val(XB1_RX, -47);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -62);
	wait(30);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, -67);
	set_val(XB1_LY, -61);
	wait(70);
	set_val(XB1_LX, -62);
	set_val(XB1_LY, -63);
	wait(40);
	set_val(XB1_LX, -57);
	set_val(XB1_LY, -68);
	wait(40);
	set_val(XB1_LX, -49);
	set_val(XB1_LY, -75);
	wait(40);
	set_val(XB1_LX, -45);
	set_val(XB1_LY, -81);
	wait(40);
	set_val(XB1_LX, -44);
	set_val(XB1_LY, -86);
	wait(40);
	set_val(XB1_RX, 77);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, -20);
	wait(150);
	set_val(XB1_RX, 100);
	set_val(XB1_LY, 0);
	wait(20);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 58);
	wait(40);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 83);
	wait(20);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 88);
	wait(20);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, 96);
	wait(30);
	set_val(XB1_RX, 96);
	set_val(XB1_LX, 76);
	set_val(XB1_LY, -24);
	wait(70);
	set_val(XB1_RX, 90);
	set_val(XB1_LX, 69);
	set_val(XB1_LY, -34);
	wait(30);
	set_val(XB1_RX, 78);
	set_val(XB1_LX, 63);
	set_val(XB1_LY, -47);
	wait(40);
	set_val(XB1_RX, 61);
	set_val(XB1_LX, 57);
	set_val(XB1_LY, -63);
	wait(80);
	set_val(XB1_RX, 47);
	set_val(XB1_LX, 56);
	set_val(XB1_LY, -70);
	wait(100);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, 55);
	set_val(XB1_LY, -71);
	wait(100);
	set_val(XB1_LX, 39);
	set_val(XB1_LY, -74);
	wait(50);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, -83);
	wait(70);
	set_val(XB1_LY, -85);
	wait(20);
	set_val(XB1_RX, -48);
	set_val(XB1_LX, -24);
	set_val(XB1_LY, -87);
	wait(80);
	set_val(XB1_RX, -57);
	set_val(XB1_LX, -51);
	set_val(XB1_LY, -90);
	wait(30);
	set_val(XB1_RX, -64);
	set_val(XB1_LX, -55);
	set_val(XB1_LY, -91);
	wait(30);
	set_val(XB1_RX, -63);
	set_val(XB1_LX, -60);
	set_val(XB1_LY, -90);
	wait(60);
	set_val(XB1_RX, -56);
	set_val(XB1_LX, -61);
	set_val(XB1_LY, -90);
	wait(30);
	set_val(XB1_RX, -54);
	set_val(XB1_LX, -62);
	set_val(XB1_LY, -90);
	wait(50);
	set_val(XB1_RX, -58);
	set_val(XB1_LX, -64);
	set_val(XB1_LY, -89);
	wait(30);
	set_val(XB1_RX, -61);
	set_val(XB1_LX, -66);
	set_val(XB1_LY, -87);
	wait(30);
	set_val(XB1_RX, -63);
	set_val(XB1_LX, -69);
	set_val(XB1_LY, -84);
	wait(30);
	set_val(XB1_RX, -63);
	set_val(XB1_LX, -71);
	set_val(XB1_LY, -83);
	wait(60);
	set_val(XB1_RX, -56);
	set_val(XB1_LX, -72);
	set_val(XB1_LY, -82);
	wait(70);
	set_val(XB1_RX, -52);
	set_val(XB1_LX, -72);
	set_val(XB1_LY, -82);
	wait(30);
	set_val(XB1_RX, -50);
	set_val(XB1_LX, -72);
	set_val(XB1_LY, -80);
	wait(60);
	set_val(XB1_RX, -53);
	set_val(XB1_LX, -71);
	set_val(XB1_LY, -75);
	wait(70);
	set_val(XB1_RX, -53);
	set_val(XB1_LX, -77);
	set_val(XB1_LY, -71);
	wait(70);
	set_val(XB1_RX, -41);
	set_val(XB1_LX, -84);
	set_val(XB1_LY, -67);
	wait(130);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, -57);
	set_val(XB1_LY, -67);
	wait(40);
	set_val(XB1_RX, 29);
	set_val(XB1_LX, -55);
	set_val(XB1_LY, -67);
	wait(70);
	set_val(XB1_RX, 58);
	set_val(XB1_LX, -54);
	set_val(XB1_LY, -70);
	wait(40);
	set_val(XB1_RX, 69);
	set_val(XB1_LX, -53);
	set_val(XB1_LY, -74);
	wait(20);
	set_val(XB1_RX, 85);
	set_val(XB1_LX, -53);
	set_val(XB1_LY, -80);
	wait(50);
	set_val(XB1_RX, 100);
	set_val(XB1_LX, -49);
	set_val(XB1_LY, -81);
	wait(80);
	set_val(XB1_RX, 34);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, -33);
	wait(120);
	set_val(XB1_RX, 0);
	set_val(XB1_LY, 0);
	wait(860);
	set_val(XB1_RX, 25);
	set_val(XB1_RX, 0);
	set_val(XB1_RX, 23);
	set_val(XB1_LX, -21);
	set_val(XB1_LY, -89);
	wait(2540);
	set_val(XB1_RX, -46);
	set_val(XB1_LX, -58);
	set_val(XB1_LY, -91);
	wait(1440);
	set_val(XB1_RX, -65);
	set_val(XB1_LX, -64);
	set_val(XB1_LY, -89);
	wait(100);
	set_val(XB1_RX, -67);
	set_val(XB1_LX, -65);
	set_val(XB1_LY, -88);
	wait(630);
	set_val(XB1_RX, 0);
	set_val(XB1_LX, 0);
	set_val(XB1_LY, 0);
	wait(730);
	set_val(XB1_RX, 24);
	wait(240);
	set_val(XB1_RX, 0);
	wait(230);
	set_val(XB1_RX, 47);
	wait(180);
	set_val(XB1_RX, 56);
	wait(90);
	set_val(XB1_RX, 0)
}

fcombo ANTIRECOIL {
// Vertical

    comboAntiRecoilVertical = get_val(XB1_RY) + antiRecoilVertical[profileId];
    if(comboAntiRecoilVertical > 100) {
    	comboAntiRecoilVertical = 100;
	}
    if(abs(get_val(XB1_RY)) < abs( antiRecoilVertical[profileId])) {
    	set_val(XB1_RY, (comboAntiRecoilVertical * settings[InvertEnum]));
   	}
// Horizontal
    comboAntiRecoilHorizontal = get_val(XB1_RX) + antiRecoilHorizontal[profileId];

   	if(comboAntiRecoilHorizontal > 100) {
    	comboAntiRecoilHorizontal = 100;
	}

    if(abs(get_val(XB1_RX)) < abs(comboAntiRecoilHorizontal[profileId])) {
    	set_val(XB1_RX, comboAntiRecoilHorizontal);
	}
}

fcombo LeftStickAimAssistRocket {
	output(POLAR_LX, settings[LeftSizeEnum] * 327);
	wait(settings[LeftSpeedEnum]);
	output(POLAR_LX, inv(settings[LeftSizeEnum] * 327) );
	wait(settings[LeftSpeedEnum]);
}

int frame=0;
const uint8 introN[] = { 82, 111, 99, 107, 77, 111, 100, 32, 65, 105, 109, 32, 67, 79, 68, 0};
const uint8 introV[] = { 118, 58, 51, 46, 54,46, 55,0 };

fcombo ComboDisplayIntro {
	wait(50);
	image_oled(0, 0, TRUE, TRUE, Frames[frame]);
	print(centerX(sizeof(introN) - 1, OLED_FONT_SMALL_WIDTH),40,OLED_FONT_SMALL,OLED_WHITE,addr(introN));
	print(40,50,OLED_FONT_SMALL,OLED_WHITE,addr(introV));
	frame ++;
}

fcombo DISPLAY_DESACTIVATED {
	currentLedColor = Black;
	SetLEDColor(currentLedColor);
	print(centerX(getStringLength(ONOFF[0]), OLED_FONT_LARGE_WIDTH),15,OLED_FONT_LARGE,OLED_WHITE,ONOFF[0]);
	wait(2000);
}


fcombo SAVE {
	cls_oled(0);
   	print(centerX(sizeof(DSAVED) - 1,OLED_FONT_LARGE_WIDTH),centerY(OLED_FONT_LARGE_HEIGHT),OLED_FONT_LARGE,OLED_WHITE,DSAVED[0]);
	wait(1000);
}

// Deadzone handling combo
fcombo DeadzoneCorrection {

    if (abs(get_val(XB1_LX)) < 10) set_val(XB1_LX, 0);
    if (abs(get_val(XB1_LY)) < 10) set_val(XB1_LY, 0);
}

fcombo AutoRun {
	if(
		(isqrt(pow(abs(get_ival(XB1_LX)),2) + pow(abs(get_ival(XB1_LY)),2)) >= 90)
		&& get_ival(XB1_LY) < 20
		&& !get_val(ADS_BTN)
		&& !get_val(FIRE_BTN)
		) {
		set_val(SPRINT_BTN, 100);
	}
}

fcombo ComboEnemyPing {
	set_val(PING_BTN,100);
	wait(20);
	set_val(PING_BTN,0);
	wait(20);
	set_val(PING_BTN,100);
	wait(20);
	set_val(PING_BTN,0);
	wait(2000);
}

fcombo SLIDE_CANCEL {
    set_val(CROUCH_BTN, 100);
    wait(settings[SlideCancelDelayEnum]);
    set_val(CROUCH_BTN, 0);
    wait(60);
    set_val(CROUCH_BTN, 100);
    wait(50);
    set_val(CROUCH_BTN, 100);
    set_val(JUMP_BTN, 100);
    wait(60);
    set_val(JUMP_BTN, 0);
    set_val(JUMP_BTN, 100);
    wait(10);
    set_val(JUMP_BTN, 0);
}

fcombo RAPIDFIRE {
	wait(rapidFireHoldTime);
	set_val(FIRE_BTN, 0);
	wait(rapidFireRestTime);
}

fcombo BunnyHop {
    set_val(JUMP_BTN,100);
    wait(50);
    set_val(JUMP_BTN,0);
    wait(50);
}


////
////////////
const int16 pollarArr[] =
{ 23170,  23167,  23156,  23139,  23114,  23082,  23044,  22998,  22945,  22885,  22818,  22745,  22664,  22577,  22482,  22381,  22273,  22158,  22036,  21908,  21773,  21632,  21483,  21329,  21167,  21000,  20825,  20645,  20458,  20265,  20066,  19861,  19650,  19432,  19209,  18980,  18745,  18505,  18259,  18007,  17750,  17487,  17219,  16946,  16667,  16384,  16096,  15802,  15504,  15201,  14894,  14582,  14265,  13944,  13619,  13290,  12957,  12620,  12278,  11934,  11585,  11233,  10878,  10519,  10157,  9792,  9424,  9053,  8680,  8304,  7925,  7544,  7160,  6774,  6387,  5997,  5605,  5212,  4817,  4421,  4024,  3625,  3225,  2824,  2422,  2019,  1616,  1213,  809,  404,  00,  -404,  -809,  -1213,  -1616,  -2019,  -2422,  -2824,  -3225,  -3625,  -4024,  -4421,  -4817,  -5212,  -5605,  -5997,  -6387,  -6774,  -7160,  -7544,  -7925,  -8304,  -8680,  -9053,  -9424,  -9792,  -10157,  -10519,  -10878,  -11233,  -11585,  -11934,  -12278,  -12620,  -12957,  -13290,  -13619,  -13944,  -14265,  -14582,  -14894,  -15201,  -15504,  -15802,  -16096,  -16384,  -16667,  -16946,  -17219,  -17487,  -17750,  -18007,  -18259,  -18505,  -18745,  -18980,  -19209,  -19432,  -19650,  -19861,  -20066,  -20265,  -20458,  -20645,  -20825,  -21000,  -21167,  -21329,  -21483,  -21632,  -21773,  -21908,  -22036,  -22158,  -22273,  -22381,  -22482,  -22577,  -22664,  -22745,  -22818,  -22885,  -22945,  -22998,  -23044,  -23082,  -23114,  -23139,  -23156,  -23167,  -23170,  -23167,  -23156,  -23139,  -23114,  -23082,  -23044,  -22998,  -22945,  -22885,  -22818,  -22745,  -22664,  -22577,  -22482,  -22381,  -22273,  -22158,  -22036,  -21908,  -21773,  -21632,  -21483,  -21329,  -21167,  -21000,  -20825,  -20645,  -20458,  -20265,  -20066,  -19861,  -19650,  -19432,  -19209,  -18980,  -18745,  -18505,  -18259,  -18007,  -17750,  -17487,  -17219,  -16946,  -16667,  -16384,  -16096,  -15802,  -15504,  -15201,  -14894,  -14582,  -14265,  -13944,  -13619,  -13290,  -12957,  -12620,  -12278,  -11934,  -11585,  -11233,  -10878,  -10519,  -10157,  -9792,  -9424,  -9053,  -8680,  -8304,  -7925,  -7544,  -7160,  -6774,  -6387,  -5997,  -5605,  -5212,  -4817,  -4421,  -4024,  -3625,  -3225,  -2824,  -2422,  -2019,  -1616,  -1213,  -809,  -404,  00,  404,  809,  1213,  1616,  2019,  2422,  2824,  3225,  3625,  4024,  4421,  4817,  5212,  5605,  5997,  6387,  6774,  7160,  7544,  7925,  8304,  8680,  9053,  9424,  9792,  10157,  10519,  10878,  11233,  11585,  11934,  12278,  12620,  12957,  13290,  13619,  13944,  14265,  14582,  14894,  15201,  15504,  15802,  16096,  16384,  16667,  16946,  17219,  17487,  17750,  18007,  18259,  18505,  18745,  18980,  19209,  19432,  19650,  19861,  20066,  20265,  20458,  20645,  20825,  21000,  21167,  21329,  21483,  21632,  21773,  21908,  22036,  22158,  22273,  22381,  22482,  22577,  22664,  22745,  22818,  22885,  22945,  22998,  23044,  23082,  23114,  23139,  23156,  23167,  23170 };

const image Frames[] = {
{66, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07},
{69, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC1},
{71, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xE4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xF1},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80},
{76, 61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00},
{76, 52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00},
{76, 34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00},
{72, 25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80},
{66, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07},
{69, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC1},
{71, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xE4, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xF1},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC8, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEC, 0x82, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xC0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x6C, 0x82, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3E, 0x04, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xFF, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90},
{76, 64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80},
{76, 61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xF2, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFE, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xC0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0xC8, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xEC, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xC8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6C, 0x82, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xC0, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xEC, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0xFF, 0xFB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xBE, 0x04, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0xE0, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3F, 0xFC, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xB4, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00}

}
 ˙øã∫É∫éæé∫âªçπâÀ